!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e(require("React")):"function"==typeof define&&define.amd?define(["React"],e):"object"==typeof exports?exports["wizard-of-oz"]=e(require("React")):t["wizard-of-oz"]=e(t.React)}(this,function(t){return function(t){function e(r){if(n[r])return n[r].exports;var o=n[r]={exports:{},id:r,loaded:!1};return t[r].call(o.exports,o,o.exports,e),o.loaded=!0,o.exports}var n={};return e.m=t,e.c=n,e.p="",e(0)}([function(t,e,n){"use strict";t.exports=n(2)},function(t,e){var n=t.exports={version:"1.2.6"};"number"==typeof __e&&(__e=n)},function(t,e,n){"use strict";var r=n(3)["default"],o=n(4)["default"];Object.defineProperty(e,"__esModule",{value:!0});var a=n(22),i=o(a);n(21);var s=i["default"].createClass({displayName:"Wizard",getInitialState:function(){return{currentStepNo:0,prevStepNo:-1,data:{}}},getButtons:function(t,e,n){var r=this["goto"].bind(this,"back"),o=this["goto"].bind(this,"next"),a=e>0&&-1==t.indexOf("back")?i["default"].createElement("button",{onClick:r},"Back"):"",s=n-1>e&&-1==t.indexOf("next")?i["default"].createElement("button",{onClick:o},"Next"):"";return i["default"].createElement("div",{className:"buttonContainer"},a,s)},"goto":function(t){var e=this.props.steps,n=this.state,r=n.currentStepNo,o=n.prevStepNo;if(r>-1&&r<e.length){var a;if(isNaN(parseInt(t)))switch(t){case"back":a=-1===o?r-1:o;break;case"next":a=r+1}else t>-1&&t<e.length&&t!=r&&(a=t);this.setState({currentStepNo:a,prevStepNo:r})}else alert("No way!")},addData:function(t){this.setState({data:r({},this.state.data,t)})},render:function(){var t,e=this.props.steps;if(e&&e.length>0){var n=e.length,r=e[this.state.currentStepNo],o=i["default"].cloneElement(r.component,{"goto":this["goto"],addData:this.addData,name:r.name,wizardData:this.props.data,passData:this.state.data});t=i["default"].createElement("div",null,o,this.getButtons(r.disabledButtons||[],this.state.currentStepNo,n))}else t=i["default"].createElement("div",null,"No steps here");return t}});e.Wizard=s;var u=i["default"].createClass({displayName:"Step",getInitialState:function(){return{}},"goto":function(t){this.props["goto"](t)},renderType:function(){var t=this;if("text"===this.props.type)return i["default"].createElement("div",null,this.props.text);var e=i["default"].Children.map(this.props.children,function(e){return i["default"].cloneElement(e,{"goto":t["goto"],addData:t.props.addData})});return i["default"].createElement("div",null,e)},render:function(){}});e.Step=u},function(t,e,n){t.exports={"default":n(5),__esModule:!0}},function(t,e){"use strict";e["default"]=function(t){return t&&t.__esModule?t:{"default":t}},e.__esModule=!0},function(t,e,n){n(17),t.exports=n(1).Object.assign},function(t,e){t.exports=function(t){if("function"!=typeof t)throw TypeError(t+" is not a function!");return t}},function(t,e){var n={}.toString;t.exports=function(t){return n.call(t).slice(8,-1)}},function(t,e,n){var r=n(6);t.exports=function(t,e,n){if(r(t),void 0===e)return t;switch(n){case 1:return function(n){return t.call(e,n)};case 2:return function(n,r){return t.call(e,n,r)};case 3:return function(n,r,o){return t.call(e,n,r,o)}}return function(){return t.apply(e,arguments)}}},function(t,e){t.exports=function(t){if(void 0==t)throw TypeError("Can't call method on  "+t);return t}},function(t,e,n){var r=n(12),o=n(1),a=n(8),i="prototype",s=function(t,e,n){var u,c,f,l=t&s.F,p=t&s.G,d=t&s.S,h=t&s.P,v=t&s.B,g=t&s.W,m=p?o:o[e]||(o[e]={}),y=p?r:d?r[e]:(r[e]||{})[i];p&&(n=e);for(u in n)c=!l&&y&&u in y,c&&u in m||(f=c?y[u]:n[u],m[u]=p&&"function"!=typeof y[u]?n[u]:v&&c?a(f,r):g&&y[u]==f?function(t){var e=function(e){return this instanceof t?new t(e):t(e)};return e[i]=t[i],e}(f):h&&"function"==typeof f?a(Function.call,f):f,h&&((m[i]||(m[i]={}))[u]=f))};s.F=1,s.G=2,s.S=4,s.P=8,s.B=16,s.W=32,t.exports=s},function(t,e){t.exports=function(t){try{return!!t()}catch(e){return!0}}},function(t,e){var n=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=n)},function(t,e,n){var r=n(7);t.exports=Object("z").propertyIsEnumerable(0)?Object:function(t){return"String"==r(t)?t.split(""):Object(t)}},function(t,e){var n=Object;t.exports={create:n.create,getProto:n.getPrototypeOf,isEnum:{}.propertyIsEnumerable,getDesc:n.getOwnPropertyDescriptor,setDesc:n.defineProperty,setDescs:n.defineProperties,getKeys:n.keys,getNames:n.getOwnPropertyNames,getSymbols:n.getOwnPropertySymbols,each:[].forEach}},function(t,e,n){var r=n(14),o=n(16),a=n(13);t.exports=n(11)(function(){var t=Object.assign,e={},n={},r=Symbol(),o="abcdefghijklmnopqrst";return e[r]=7,o.split("").forEach(function(t){n[t]=t}),7!=t({},e)[r]||Object.keys(t({},n)).join("")!=o})?function(t,e){for(var n=o(t),i=arguments,s=i.length,u=1,c=r.getKeys,f=r.getSymbols,l=r.isEnum;s>u;)for(var p,d=a(i[u++]),h=f?c(d).concat(f(d)):c(d),v=h.length,g=0;v>g;)l.call(d,p=h[g++])&&(n[p]=d[p]);return n}:Object.assign},function(t,e,n){var r=n(9);t.exports=function(t){return Object(r(t))}},function(t,e,n){var r=n(10);r(r.S+r.F,"Object",{assign:n(15)})},function(t,e,n){e=t.exports=n(19)(),e.push([t.id,"",""])},function(t,e){t.exports=function(){var t=[];return t.toString=function(){for(var t=[],e=0;e<this.length;e++){var n=this[e];n[2]?t.push("@media "+n[2]+"{"+n[1]+"}"):t.push(n[1])}return t.join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var r={},o=0;o<this.length;o++){var a=this[o][0];"number"==typeof a&&(r[a]=!0)}for(o=0;o<e.length;o++){var i=e[o];"number"==typeof i[0]&&r[i[0]]||(n&&!i[2]?i[2]=n:n&&(i[2]="("+i[2]+") and ("+n+")"),t.push(i))}},t}},function(t,e,n){function r(t,e){for(var n=0;n<t.length;n++){var r=t[n],o=l[r.id];if(o){o.refs++;for(var a=0;a<o.parts.length;a++)o.parts[a](r.parts[a]);for(;a<r.parts.length;a++)o.parts.push(s(r.parts[a],e))}else{for(var i=[],a=0;a<r.parts.length;a++)i.push(s(r.parts[a],e));l[r.id]={id:r.id,refs:1,parts:i}}}}function o(t){for(var e=[],n={},r=0;r<t.length;r++){var o=t[r],a=o[0],i=o[1],s=o[2],u=o[3],c={css:i,media:s,sourceMap:u};n[a]?n[a].parts.push(c):e.push(n[a]={id:a,parts:[c]})}return e}function a(){var t=document.createElement("style"),e=h();return t.type="text/css",e.appendChild(t),t}function i(){var t=document.createElement("link"),e=h();return t.rel="stylesheet",e.appendChild(t),t}function s(t,e){var n,r,o;if(e.singleton){var s=g++;n=v||(v=a()),r=u.bind(null,n,s,!1),o=u.bind(null,n,s,!0)}else t.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=i(),r=f.bind(null,n),o=function(){n.parentNode.removeChild(n),n.href&&URL.revokeObjectURL(n.href)}):(n=a(),r=c.bind(null,n),o=function(){n.parentNode.removeChild(n)});return r(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;r(t=e)}else o()}}function u(t,e,n,r){var o=n?"":r.css;if(t.styleSheet)t.styleSheet.cssText=m(e,o);else{var a=document.createTextNode(o),i=t.childNodes;i[e]&&t.removeChild(i[e]),i.length?t.insertBefore(a,i[e]):t.appendChild(a)}}function c(t,e){var n=e.css,r=e.media;e.sourceMap;if(r&&t.setAttribute("media",r),t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}function f(t,e){var n=e.css,r=(e.media,e.sourceMap);r&&(n+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(r))))+" */");var o=new Blob([n],{type:"text/css"}),a=t.href;t.href=URL.createObjectURL(o),a&&URL.revokeObjectURL(a)}var l={},p=function(t){var e;return function(){return"undefined"==typeof e&&(e=t.apply(this,arguments)),e}},d=p(function(){return/msie [6-9]\b/.test(window.navigator.userAgent.toLowerCase())}),h=p(function(){return document.head||document.getElementsByTagName("head")[0]}),v=null,g=0;t.exports=function(t,e){e=e||{},"undefined"==typeof e.singleton&&(e.singleton=d());var n=o(t);return r(n,e),function(t){for(var a=[],i=0;i<n.length;i++){var s=n[i],u=l[s.id];u.refs--,a.push(u)}if(t){var c=o(t);r(c,e)}for(var i=0;i<a.length;i++){var u=a[i];if(0===u.refs){for(var f=0;f<u.parts.length;f++)u.parts[f]();delete l[u.id]}}}};var m=function(){var t=[];return function(e,n){return t[e]=n,t.filter(Boolean).join("\n")}}()},function(t,e,n){var r=n(18);"string"==typeof r&&(r=[[t.id,r,""]]);n(20)(r,{});r.locals&&(t.exports=r.locals)},function(e,n){e.exports=t}])});
//# sourceMappingURL=data:application/json;base64,
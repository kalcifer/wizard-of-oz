!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e(require("React")):"function"==typeof define&&define.amd?define(["React"],e):"object"==typeof exports?exports["wizard-of-oz"]=e(require("React")):t["wizard-of-oz"]=e(t.React)}(this,function(t){return function(t){function e(r){if(n[r])return n[r].exports;var o=n[r]={exports:{},id:r,loaded:!1};return t[r].call(o.exports,o,o.exports,e),o.loaded=!0,o.exports}var n={};return e.m=t,e.c=n,e.p="",e(0)}([function(t,e,n){"use strict";t.exports=n(2)},function(t,e){var n=t.exports={version:"1.2.6"};"number"==typeof __e&&(__e=n)},function(t,e,n){"use strict";var r=n(3)["default"],o=n(4)["default"];Object.defineProperty(e,"__esModule",{value:!0});var a=n(22),i=o(a);n(21);var s=i["default"].createClass({displayName:"Wizard",getInitialState:function(){return{currentStepNo:0,prevStepNo:-1,data:{}}},getButtons:function(t,e,n){var r=this["goto"].bind(this,"back"),o=this["goto"].bind(this,"next"),a=e>0&&-1==t.indexOf("back")?i["default"].createElement("button",{onClick:r},"Back"):"",s=n-1>e&&-1==t.indexOf("next")?i["default"].createElement("button",{onClick:o},"Next"):"";return i["default"].createElement("div",{className:"buttonContainer"},a,s)},"goto":function(t){var e=this.props.steps,n=this.state,r=n.currentStepNo,o=n.prevStepNo;if(r>-1&&r<e.length){var a;if(isNaN(parseInt(t)))switch(t){case"back":a=-1===o?r-1:o;break;case"next":a=r+1}else t>-1&&t<e.length&&t!=r&&(a=t);this.setState({currentStepNo:a,prevStepNo:r})}else alert("No way!")},addData:function(t){this.setState({data:r({},this.state.data,t)})},render:function(){var t,e=this.props.steps;if(e&&e.length>0){var n=e.length,r=e[this.state.currentStepNo],o=i["default"].cloneElement(r.component,{"goto":this["goto"],addData:this.addData,name:r.name,wizardData:this.props.data,passData:this.state.data});t=i["default"].createElement("div",null,o,this.getButtons(r.disabledButtons||[],this.state.currentStepNo,n))}else t=i["default"].createElement("div",null,"No steps here");return t}});e.Wizard=s;var u=i["default"].createClass({displayName:"Step",getInitialState:function(){return{}},"goto":function(t){this.props["goto"](t)},renderType:function(){var t=this;if("text"===this.props.type)return i["default"].createElement("div",null,this.props.text);var e=i["default"].Children.map(this.props.children,function(e){return i["default"].cloneElement(e,{"goto":t["goto"],addData:t.props.addData})});return i["default"].createElement("div",null,e)},render:function(){return i["default"].createElement("div",null,i["default"].createElement("h5",null,this.props.name),this.renderType())}});e.Step=u},function(t,e,n){t.exports={"default":n(5),__esModule:!0}},function(t,e){"use strict";e["default"]=function(t){return t&&t.__esModule?t:{"default":t}},e.__esModule=!0},function(t,e,n){n(17),t.exports=n(1).Object.assign},function(t,e){t.exports=function(t){if("function"!=typeof t)throw TypeError(t+" is not a function!");return t}},function(t,e){var n={}.toString;t.exports=function(t){return n.call(t).slice(8,-1)}},function(t,e,n){var r=n(6);t.exports=function(t,e,n){if(r(t),void 0===e)return t;switch(n){case 1:return function(n){return t.call(e,n)};case 2:return function(n,r){return t.call(e,n,r)};case 3:return function(n,r,o){return t.call(e,n,r,o)}}return function(){return t.apply(e,arguments)}}},function(t,e){t.exports=function(t){if(void 0==t)throw TypeError("Can't call method on  "+t);return t}},function(t,e,n){var r=n(12),o=n(1),a=n(8),i="prototype",s=function(t,e,n){var u,c,f,l=t&s.F,p=t&s.G,d=t&s.S,h=t&s.P,v=t&s.B,g=t&s.W,m=p?o:o[e]||(o[e]={}),y=p?r:d?r[e]:(r[e]||{})[i];p&&(n=e);for(u in n)c=!l&&y&&u in y,c&&u in m||(f=c?y[u]:n[u],m[u]=p&&"function"!=typeof y[u]?n[u]:v&&c?a(f,r):g&&y[u]==f?function(t){var e=function(e){return this instanceof t?new t(e):t(e)};return e[i]=t[i],e}(f):h&&"function"==typeof f?a(Function.call,f):f,h&&((m[i]||(m[i]={}))[u]=f))};s.F=1,s.G=2,s.S=4,s.P=8,s.B=16,s.W=32,t.exports=s},function(t,e){t.exports=function(t){try{return!!t()}catch(e){return!0}}},function(t,e){var n=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=n)},function(t,e,n){var r=n(7);t.exports=Object("z").propertyIsEnumerable(0)?Object:function(t){return"String"==r(t)?t.split(""):Object(t)}},function(t,e){var n=Object;t.exports={create:n.create,getProto:n.getPrototypeOf,isEnum:{}.propertyIsEnumerable,getDesc:n.getOwnPropertyDescriptor,setDesc:n.defineProperty,setDescs:n.defineProperties,getKeys:n.keys,getNames:n.getOwnPropertyNames,getSymbols:n.getOwnPropertySymbols,each:[].forEach}},function(t,e,n){var r=n(14),o=n(16),a=n(13);t.exports=n(11)(function(){var t=Object.assign,e={},n={},r=Symbol(),o="abcdefghijklmnopqrst";return e[r]=7,o.split("").forEach(function(t){n[t]=t}),7!=t({},e)[r]||Object.keys(t({},n)).join("")!=o})?function(t,e){for(var n=o(t),i=arguments,s=i.length,u=1,c=r.getKeys,f=r.getSymbols,l=r.isEnum;s>u;)for(var p,d=a(i[u++]),h=f?c(d).concat(f(d)):c(d),v=h.length,g=0;v>g;)l.call(d,p=h[g++])&&(n[p]=d[p]);return n}:Object.assign},function(t,e,n){var r=n(9);t.exports=function(t){return Object(r(t))}},function(t,e,n){var r=n(10);r(r.S+r.F,"Object",{assign:n(15)})},function(t,e,n){e=t.exports=n(19)(),e.push([t.id,"",""])},function(t,e){t.exports=function(){var t=[];return t.toString=function(){for(var t=[],e=0;e<this.length;e++){var n=this[e];n[2]?t.push("@media "+n[2]+"{"+n[1]+"}"):t.push(n[1])}return t.join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var r={},o=0;o<this.length;o++){var a=this[o][0];"number"==typeof a&&(r[a]=!0)}for(o=0;o<e.length;o++){var i=e[o];"number"==typeof i[0]&&r[i[0]]||(n&&!i[2]?i[2]=n:n&&(i[2]="("+i[2]+") and ("+n+")"),t.push(i))}},t}},function(t,e,n){function r(t,e){for(var n=0;n<t.length;n++){var r=t[n],o=l[r.id];if(o){o.refs++;for(var a=0;a<o.parts.length;a++)o.parts[a](r.parts[a]);for(;a<r.parts.length;a++)o.parts.push(s(r.parts[a],e))}else{for(var i=[],a=0;a<r.parts.length;a++)i.push(s(r.parts[a],e));l[r.id]={id:r.id,refs:1,parts:i}}}}function o(t){for(var e=[],n={},r=0;r<t.length;r++){var o=t[r],a=o[0],i=o[1],s=o[2],u=o[3],c={css:i,media:s,sourceMap:u};n[a]?n[a].parts.push(c):e.push(n[a]={id:a,parts:[c]})}return e}function a(){var t=document.createElement("style"),e=h();return t.type="text/css",e.appendChild(t),t}function i(){var t=document.createElement("link"),e=h();return t.rel="stylesheet",e.appendChild(t),t}function s(t,e){var n,r,o;if(e.singleton){var s=g++;n=v||(v=a()),r=u.bind(null,n,s,!1),o=u.bind(null,n,s,!0)}else t.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=i(),r=f.bind(null,n),o=function(){n.parentNode.removeChild(n),n.href&&URL.revokeObjectURL(n.href)}):(n=a(),r=c.bind(null,n),o=function(){n.parentNode.removeChild(n)});return r(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;r(t=e)}else o()}}function u(t,e,n,r){var o=n?"":r.css;if(t.styleSheet)t.styleSheet.cssText=m(e,o);else{var a=document.createTextNode(o),i=t.childNodes;i[e]&&t.removeChild(i[e]),i.length?t.insertBefore(a,i[e]):t.appendChild(a)}}function c(t,e){var n=e.css,r=e.media;e.sourceMap;if(r&&t.setAttribute("media",r),t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}function f(t,e){var n=e.css,r=(e.media,e.sourceMap);r&&(n+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(r))))+" */");var o=new Blob([n],{type:"text/css"}),a=t.href;t.href=URL.createObjectURL(o),a&&URL.revokeObjectURL(a)}var l={},p=function(t){var e;return function(){return"undefined"==typeof e&&(e=t.apply(this,arguments)),e}},d=p(function(){return/msie [6-9]\b/.test(window.navigator.userAgent.toLowerCase())}),h=p(function(){return document.head||document.getElementsByTagName("head")[0]}),v=null,g=0;t.exports=function(t,e){e=e||{},"undefined"==typeof e.singleton&&(e.singleton=d());var n=o(t);return r(n,e),function(t){for(var a=[],i=0;i<n.length;i++){var s=n[i],u=l[s.id];u.refs--,a.push(u)}if(t){var c=o(t);r(c,e)}for(var i=0;i<a.length;i++){var u=a[i];if(0===u.refs){for(var f=0;f<u.parts.length;f++)u.parts[f]();delete l[u.id]}}}};var m=function(){var t=[];return function(e,n){return t[e]=n,t.filter(Boolean).join("\n")}}()},function(t,e,n){var r=n(18);"string"==typeof r&&(r=[[t.id,r,""]]);n(20)(r,{});r.locals&&(t.exports=r.locals)},function(e,n){e.exports=t}])});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwid2VicGFjazovLy93aXphcmQtb2Ytb3ouanMiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svYm9vdHN0cmFwIDRmNzBiZWM0ZmUyMWEwM2M0M2FlIiwid2VicGFjazovLy8uL2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzLyQuY29yZS5qcyIsIndlYnBhY2s6Ly8vLi9saWIvd2l6YXJkLW9mLW96LmpzeCIsIndlYnBhY2s6Ly8vLi9+L2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvYXNzaWduLmpzIiwid2VicGFjazovLy8uL34vYmFiZWwtcnVudGltZS9oZWxwZXJzL2ludGVyb3AtcmVxdWlyZS1kZWZhdWx0LmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9hc3NpZ24uanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy8kLmEtZnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy8kLmNvZi5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzLyQuY3R4LmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvJC5kZWZpbmVkLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvJC5leHBvcnQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy8kLmZhaWxzLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvJC5nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy8kLmlvYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy8kLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvJC5vYmplY3QtYXNzaWduLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvJC50by1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYub2JqZWN0LmFzc2lnbi5qcyIsIndlYnBhY2s6Ly8vLi9saWIvd2l6YXJkLW9mLW96LnNjc3MiLCJ3ZWJwYWNrOi8vLy4vfi9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qcyIsIndlYnBhY2s6Ly8vLi9+L3N0eWxlLWxvYWRlci9hZGRTdHlsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbGliL3dpemFyZC1vZi1vei5zY3NzPzQxYmQiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwiUmVhY3RcIiJdLCJuYW1lcyI6WyJyb290IiwiZmFjdG9yeSIsImV4cG9ydHMiLCJtb2R1bGUiLCJyZXF1aXJlIiwiZGVmaW5lIiwiYW1kIiwidGhpcyIsIl9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfMjJfXyIsIm1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJpbnN0YWxsZWRNb2R1bGVzIiwiaWQiLCJsb2FkZWQiLCJjYWxsIiwibSIsImMiLCJwIiwiY29yZSIsInZlcnNpb24iLCJfX2UiLCJfT2JqZWN0JGFzc2lnbiIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsInZhbHVlIiwiX3JlYWN0IiwiX3JlYWN0MiIsIldpemFyZCIsImNyZWF0ZUNsYXNzIiwiZGlzcGxheU5hbWUiLCJnZXRJbml0aWFsU3RhdGUiLCJjdXJyZW50U3RlcE5vIiwicHJldlN0ZXBObyIsImRhdGEiLCJnZXRCdXR0b25zIiwiZGlzYWJsZWRCdXR0b25zIiwiaW5kZXgiLCJsZW5ndGgiLCJiYWNrZXZlbnRIYW5kbGVyIiwiYmluZCIsIm5leHRldmVudEhhbmRsZXIiLCJiYWNrQnV0dG9uIiwiaW5kZXhPZiIsImNyZWF0ZUVsZW1lbnQiLCJvbkNsaWNrIiwibmV4dEJ1dHRvbiIsImNsYXNzTmFtZSIsImdvdG8iLCJwb3NpdGlvbiIsInN0ZXBzIiwicHJvcHMiLCJfc3RhdGUiLCJzdGF0ZSIsIm5leHRTdGVwTm8iLCJpc05hTiIsInBhcnNlSW50Iiwic2V0U3RhdGUiLCJhbGVydCIsImFkZERhdGEiLCJyZW5kZXIiLCJodG1sIiwiY3VycmVudFN0ZXAiLCJjdXJyZW50U3RlcFdpdGhHb3RvIiwiY2xvbmVFbGVtZW50IiwiY29tcG9uZW50IiwibmFtZSIsIndpemFyZERhdGEiLCJwYXNzRGF0YSIsIlN0ZXAiLCJyZW5kZXJUeXBlIiwiX3RoaXMiLCJ0eXBlIiwidGV4dCIsImNoaWxkcmVuV2l0aEdvdG8iLCJDaGlsZHJlbiIsIm1hcCIsImNoaWxkcmVuIiwiY2hpbGQiLCJkZWZhdWx0IiwiX19lc01vZHVsZSIsIm9iaiIsImFzc2lnbiIsIml0IiwiVHlwZUVycm9yIiwidG9TdHJpbmciLCJzbGljZSIsImFGdW5jdGlvbiIsImZuIiwidGhhdCIsInVuZGVmaW5lZCIsImEiLCJiIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJnbG9iYWwiLCJjdHgiLCJQUk9UT1RZUEUiLCIkZXhwb3J0Iiwic291cmNlIiwia2V5Iiwib3duIiwib3V0IiwiSVNfRk9SQ0VEIiwiRiIsIklTX0dMT0JBTCIsIkciLCJJU19TVEFUSUMiLCJTIiwiSVNfUFJPVE8iLCJQIiwiSVNfQklORCIsIkIiLCJJU19XUkFQIiwiVyIsInRhcmdldCIsIkMiLCJwYXJhbSIsIkZ1bmN0aW9uIiwiZXhlYyIsImUiLCJ3aW5kb3ciLCJNYXRoIiwic2VsZiIsIl9fZyIsImNvZiIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwic3BsaXQiLCIkT2JqZWN0IiwiY3JlYXRlIiwiZ2V0UHJvdG8iLCJnZXRQcm90b3R5cGVPZiIsImlzRW51bSIsImdldERlc2MiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJzZXREZXNjIiwic2V0RGVzY3MiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiZ2V0S2V5cyIsImtleXMiLCJnZXROYW1lcyIsImdldE93blByb3BlcnR5TmFtZXMiLCJnZXRTeW1ib2xzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiZWFjaCIsImZvckVhY2giLCIkIiwidG9PYmplY3QiLCJJT2JqZWN0IiwiQSIsIlN5bWJvbCIsIksiLCJrIiwiam9pbiIsIlQiLCIkJCIsIiQkbGVuIiwiY29uY2F0IiwiaiIsImRlZmluZWQiLCJwdXNoIiwibGlzdCIsInJlc3VsdCIsImkiLCJpdGVtIiwibWVkaWFRdWVyeSIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJhZGRTdHlsZXNUb0RvbSIsInN0eWxlcyIsIm9wdGlvbnMiLCJkb21TdHlsZSIsInN0eWxlc0luRG9tIiwicmVmcyIsInBhcnRzIiwiYWRkU3R5bGUiLCJsaXN0VG9TdHlsZXMiLCJuZXdTdHlsZXMiLCJjc3MiLCJtZWRpYSIsInNvdXJjZU1hcCIsInBhcnQiLCJjcmVhdGVTdHlsZUVsZW1lbnQiLCJzdHlsZUVsZW1lbnQiLCJkb2N1bWVudCIsImhlYWQiLCJnZXRIZWFkRWxlbWVudCIsImFwcGVuZENoaWxkIiwiY3JlYXRlTGlua0VsZW1lbnQiLCJsaW5rRWxlbWVudCIsInJlbCIsInVwZGF0ZSIsInJlbW92ZSIsInNpbmdsZXRvbiIsInN0eWxlSW5kZXgiLCJzaW5nbGV0b25Db3VudGVyIiwic2luZ2xldG9uRWxlbWVudCIsImFwcGx5VG9TaW5nbGV0b25UYWciLCJVUkwiLCJjcmVhdGVPYmplY3RVUkwiLCJyZXZva2VPYmplY3RVUkwiLCJCbG9iIiwiYnRvYSIsInVwZGF0ZUxpbmsiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJocmVmIiwiYXBwbHlUb1RhZyIsIm5ld09iaiIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwicmVwbGFjZVRleHQiLCJjc3NOb2RlIiwiY3JlYXRlVGV4dE5vZGUiLCJjaGlsZE5vZGVzIiwiaW5zZXJ0QmVmb3JlIiwic2V0QXR0cmlidXRlIiwiZmlyc3RDaGlsZCIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsImJsb2IiLCJvbGRTcmMiLCJtZW1vaXplIiwibWVtbyIsImlzT2xkSUUiLCJ0ZXN0IiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwidG9Mb3dlckNhc2UiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsIm5ld0xpc3QiLCJtYXlSZW1vdmUiLCJ0ZXh0U3RvcmUiLCJyZXBsYWNlbWVudCIsImZpbHRlciIsIkJvb2xlYW4iLCJjb250ZW50IiwibG9jYWxzIl0sIm1hcHBpbmdzIjoiQ0FBQSxTQUFBQSxFQUFBQyxHQUNBLGdCQUFBQyxVQUFBLGdCQUFBQyxRQUNBQSxPQUFBRCxRQUFBRCxFQUFBRyxRQUFBLFVBQ0Esa0JBQUFDLGdCQUFBQyxJQUNBRCxRQUFBLFNBQUFKLEdBQ0EsZ0JBQUFDLFNBQ0FBLFFBQUEsZ0JBQUFELEVBQUFHLFFBQUEsVUFFQUosRUFBQSxnQkFBQUMsRUFBQUQsRUFBQSxRQUNDTyxLQUFBLFNBQUFDLEdBQ0QsTUNBZ0IsVUFBVUMsR0NOMUIsUUFBQUMsR0FBQUMsR0FHQSxHQUFBQyxFQUFBRCxHQUNBLE1BQUFDLEdBQUFELEdBQUFULE9BR0EsSUFBQUMsR0FBQVMsRUFBQUQsSUFDQVQsV0FDQVcsR0FBQUYsRUFDQUcsUUFBQSxFQVVBLE9BTkFMLEdBQUFFLEdBQUFJLEtBQUFaLEVBQUFELFFBQUFDLElBQUFELFFBQUFRLEdBR0FQLEVBQUFXLFFBQUEsRUFHQVgsRUFBQUQsUUF2QkEsR0FBQVUsS0FxQ0EsT0FUQUYsR0FBQU0sRUFBQVAsRUFHQUMsRUFBQU8sRUFBQUwsRUFHQUYsRUFBQVEsRUFBQSxHQUdBUixFQUFBLEtEZ0JNLFNBQVNQLEVBQVFELEVBQVNRLEdBRS9CLFlFeEREUCxHQUFPRCxRQUFVUSxFQUFRLElGOERuQixTQUFTUCxFQUFRRCxHRzlEdkIsR0FBQWlCLEdBQUFoQixFQUFBRCxTQUE2QmtCLFFBQUEsUUFDN0IsaUJBQUFDLFdBQUFGLElIb0VNLFNBQVNo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LFFBR0EsbUJBQUFBLEdBQUF1QixZQUFBdkIsRUFBQXVCLFVBQUFpQyxJQUVBLElBQUF6RCxHQUFBTyxFQUFBZCxFQUdBLE9BRkFNLEdBQUFDLEVBQUFDLEdBRUEsU0FBQThELEdBRUEsT0FEQUMsTUFDQXJFLEVBQUEsRUFBZ0JBLEVBQUFLLEVBQUFsSSxPQUFtQjZILElBQUEsQ0FDbkMsR0FBQUMsR0FBQUksRUFBQUwsR0FDQU8sRUFBQUMsRUFBQVAsRUFBQXhKLEdBQ0E4SixHQUFBRSxPQUNBNEQsRUFBQXhFLEtBQUFVLEdBRUEsR0FBQTZELEVBQUEsQ0FDQSxHQUFBdkQsR0FBQUQsRUFBQXdELEVBQ0FoRSxHQUFBUyxFQUFBUCxHQUVBLE9BQUFOLEdBQUEsRUFBZ0JBLEVBQUFxRSxFQUFBbE0sT0FBc0I2SCxJQUFBLENBQ3RDLEdBQUFPLEdBQUE4RCxFQUFBckUsRUFDQSxRQUFBTyxFQUFBRSxLQUFBLENBQ0EsT0FBQWQsR0FBQSxFQUFrQkEsRUFBQVksRUFBQUcsTUFBQXZJLE9BQTJCd0gsSUFDN0NZLEVBQUFHLE1BQUFmLFdBQ0FhLEdBQUFELEVBQUE5SixPQXdHQSxJQUFBc00sR0FBQSxXQUNBLEdBQUF1QixLQUVBLGlCQUFBcE0sRUFBQXFNLEdBRUEsTUFEQUQsR0FBQXBNLEdBQUFxTSxFQUNBRCxFQUFBRSxPQUFBQyxTQUFBbkYsS0FBQSxXdEIybEJNLFNBQVN2SixFQUFRRCxFQUFTUSxHdUJ4dkJoQyxHQUFBb08sR0FBQXBPLEVBQUEsR0FDQSxpQkFBQW9PLFNBQUEzTyxFQUFBVSxHQUFBaU8sRUFBQSxLQUVBcE8sR0FBQSxJQUFBb08sS0FDQUEsR0FBQUMsU0FBQTVPLEVBQUFELFFBQUE0TyxFQUFBQyxTdkI4d0JNLFNBQVM1TyxFQUFRRCxHd0JyeEJ2QkMsRUFBQUQsUUFBQU0iLCJmaWxlIjoid2l6YXJkLW9mLW96LmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKVxuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShyZXF1aXJlKFwiUmVhY3RcIikpO1xuXHRlbHNlIGlmKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZClcblx0XHRkZWZpbmUoW1wiUmVhY3RcIl0sIGZhY3RvcnkpO1xuXHRlbHNlIGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jylcblx0XHRleHBvcnRzW1wid2l6YXJkLW9mLW96XCJdID0gZmFjdG9yeShyZXF1aXJlKFwiUmVhY3RcIikpO1xuXHRlbHNlXG5cdFx0cm9vdFtcIndpemFyZC1vZi1velwiXSA9IGZhY3Rvcnkocm9vdFtcIlJlYWN0XCJdKTtcbn0pKHRoaXMsIGZ1bmN0aW9uKF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfMjJfXykge1xucmV0dXJuIFxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIHdlYnBhY2svdW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvblxuICoqLyIsIihmdW5jdGlvbiB3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbihyb290LCBmYWN0b3J5KSB7XG5cdGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jylcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkocmVxdWlyZShcIlJlYWN0XCIpKTtcblx0ZWxzZSBpZih0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpXG5cdFx0ZGVmaW5lKFtcIlJlYWN0XCJdLCBmYWN0b3J5KTtcblx0ZWxzZSBpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpXG5cdFx0ZXhwb3J0c1tcIndpemFyZC1vZi1velwiXSA9IGZhY3RvcnkocmVxdWlyZShcIlJlYWN0XCIpKTtcblx0ZWxzZVxuXHRcdHJvb3RbXCJ3aXphcmQtb2Ytb3pcIl0gPSBmYWN0b3J5KHJvb3RbXCJSZWFjdFwiXSk7XG59KSh0aGlzLCBmdW5jdGlvbihfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFXzIyX18pIHtcbnJldHVybiAvKioqKioqLyAoZnVuY3Rpb24obW9kdWxlcykgeyAvLyB3ZWJwYWNrQm9vdHN0cmFwXG4vKioqKioqLyBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4vKioqKioqLyBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4vKioqKioqLyBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pXG4vKioqKioqLyBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbi8qKioqKiovIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4vKioqKioqLyBcdFx0XHRleHBvcnRzOiB7fSxcbi8qKioqKiovIFx0XHRcdGlkOiBtb2R1bGVJZCxcbi8qKioqKiovIFx0XHRcdGxvYWRlZDogZmFsc2Vcbi8qKioqKiovIFx0XHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbi8qKioqKiovIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuLyoqKioqKi8gXHRcdG1vZHVsZS5sb2FkZWQgPSB0cnVlO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuLyoqKioqKi8gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbi8qKioqKiovIFx0fVxuLyoqKioqKi9cbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuLyoqKioqKi8gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbi8qKioqKiovIH0pXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKioqKi8gKFtcbi8qIDAgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdG1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcblxuLyoqKi8gfSxcbi8qIDEgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdHZhciBjb3JlID0gbW9kdWxlLmV4cG9ydHMgPSB7dmVyc2lvbjogJzEuMi42J307XG5cdGlmKHR5cGVvZiBfX2UgPT0gJ251bWJlcicpX19lID0gY29yZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxuXG4vKioqLyB9LFxuLyogMiAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0dmFyIF9PYmplY3QkYXNzaWduID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKVsnZGVmYXVsdCddO1xuXHRcblx0dmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQpWydkZWZhdWx0J107XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG5cdCAgdmFsdWU6IHRydWVcblx0fSk7XG5cdFxuXHR2YXIgX3JlYWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMik7XG5cdFxuXHR2YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblx0XG5cdF9fd2VicGFja19yZXF1aXJlX18oMjEpO1xuXHRcblx0dmFyIFdpemFyZCA9IF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVDbGFzcyh7XG5cdCAgZGlzcGxheU5hbWU6ICdXaXphcmQnLFxuXHRcblx0ICBnZXRJbml0aWFsU3RhdGU6IGZ1bmN0aW9uIGdldEluaXRpYWxTdGF0ZSgpIHtcblx0ICAgIHJldHVybiB7XG5cdCAgICAgIGN1cnJlbnRTdGVwTm86IDAsXG5cdCAgICAgIHByZXZTdGVwTm86IC0xLFxuXHQgICAgICBkYXRhOiB7fVxuXHQgICAgfTtcblx0ICB9LFxuXHQgIGdldEJ1dHRvbnM6IGZ1bmN0aW9uIGdldEJ1dHRvbnMoZGlzYWJsZWRCdXR0b25zLCBpbmRleCwgbGVuZ3RoKSB7XG5cdCAgICB2YXIgYmFja2V2ZW50SGFuZGxlciA9IHRoaXMuZ290by5iaW5kKHRoaXMsICdiYWNrJyk7XG5cdCAgICB2YXIgbmV4dGV2ZW50SGFuZGxlciA9IHRoaXMuZ290by5iaW5kKHRoaXMsICduZXh0Jyk7XG5cdCAgICB2YXIgYmFja0J1dHRvbiA9IGluZGV4ID4gMCAmJiBkaXNhYmxlZEJ1dHRvbnMuaW5kZXhPZignYmFjaycpID09IC0xID8gX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoXG5cdCAgICAgICdidXR0b24nLFxuXHQgICAgICB7IG9uQ2xpY2s6IGJhY2tldmVudEhhbmRsZXIgfSxcblx0ICAgICAgJ0JhY2snXG5cdCAgICApIDogJyc7XG5cdCAgICB2YXIgbmV4dEJ1dHRvbiA9IGluZGV4IDwgbGVuZ3RoIC0gMSAmJiBkaXNhYmxlZEJ1dHRvbnMuaW5kZXhPZignbmV4dCcpID09IC0xID8gX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoXG5cdCAgICAgICdidXR0b24nLFxuXHQgICAgICB7IG9uQ2xpY2s6IG5leHRldmVudEhhbmRsZXIgfSxcblx0ICAgICAgJ05leHQnXG5cdCAgICApIDogJyc7XG5cdCAgICByZXR1cm4gX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoXG5cdCAgICAgICdkaXYnLFxuXHQgICAgICB7IGNsYXNzTmFtZTogJ2J1dHRvbkNvbnRhaW5lcicgfSxcblx0ICAgICAgYmFja0J1dHRvbixcblx0ICAgICAgbmV4dEJ1dHRvblxuXHQgICAgKTtcblx0ICB9LFxuXHQgIGdvdG86IGZ1bmN0aW9uIGdvdG8ocG9zaXRpb24pIHtcblx0ICAgIHZhciBzdGVwcyA9IHRoaXMucHJvcHMuc3RlcHM7XG5cdCAgICB2YXIgX3N0YXRlID0gdGhpcy5zdGF0ZTtcblx0ICAgIHZhciBjdXJyZW50U3RlcE5vID0gX3N0YXRlLmN1cnJlbnRTdGVwTm87XG5cdCAgICB2YXIgcHJldlN0ZXBObyA9IF9zdGF0ZS5wcmV2U3RlcE5vO1xuXHRcblx0ICAgIGlmIChjdXJyZW50U3RlcE5vID4gLTEgJiYgY3VycmVudFN0ZXBObyA8IHN0ZXBzLmxlbmd0aCkge1xuXHQgICAgICB2YXIgbmV4dFN0ZXBObztcblx0ICAgICAgaWYgKGlzTmFOKHBhcnNlSW50KHBvc2l0aW9uKSkpIHtcblx0ICAgICAgICBzd2l0Y2ggKHBvc2l0aW9uKSB7XG5cdCAgICAgICAgICBjYXNlICdiYWNrJzpcblx0ICAgICAgICAgICAgbmV4dFN0ZXBObyA9IHByZXZTdGVwTm8gPT09IC0xID8gY3VycmVudFN0ZXBObyAtIDEgOiBwcmV2U3RlcE5vO1xuXHQgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgIGNhc2UgJ25leHQnOlxuXHQgICAgICAgICAgICBuZXh0U3RlcE5vID0gY3VycmVudFN0ZXBObyArIDE7XG5cdCAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgIH1cblx0ICAgICAgfSBlbHNlIHtcblx0ICAgICAgICBpZiAocG9zaXRpb24gPiAtMSAmJiBwb3NpdGlvbiA8IHN0ZXBzLmxlbmd0aCAmJiBwb3NpdGlvbiAhPSBjdXJyZW50U3RlcE5vKSB7XG5cdCAgICAgICAgICBuZXh0U3RlcE5vID0gcG9zaXRpb247XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdFxuXHQgICAgICB0aGlzLnNldFN0YXRlKHtcblx0ICAgICAgICBjdXJyZW50U3RlcE5vOiBuZXh0U3RlcE5vLFxuXHQgICAgICAgIHByZXZTdGVwTm86IGN1cnJlbnRTdGVwTm9cblx0ICAgICAgfSk7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICBhbGVydCgnTm8gd2F5IScpO1xuXHQgICAgfVxuXHQgIH0sXG5cdCAgYWRkRGF0YTogZnVuY3Rpb24gYWRkRGF0YShkYXRhKSB7XG5cdCAgICB0aGlzLnNldFN0YXRlKHtcblx0ICAgICAgZGF0YTogX09iamVjdCRhc3NpZ24oe30sIHRoaXMuc3RhdGUuZGF0YSwgZGF0YSlcblx0ICAgIH0pO1xuXHQgIH0sXG5cdCAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG5cdCAgICB2YXIgaHRtbDtcblx0ICAgIHZhciBzdGVwcyA9IHRoaXMucHJvcHMuc3RlcHM7XG5cdCAgICBpZiAoc3RlcHMgJiYgc3RlcHMubGVuZ3RoID4gMCkge1xuXHQgICAgICB2YXIgbGVuZ3RoID0gc3RlcHMubGVuZ3RoO1xuXHQgICAgICB2YXIgY3VycmVudFN0ZXAgPSBzdGVwc1t0aGlzLnN0YXRlLmN1cnJlbnRTdGVwTm9dO1xuXHQgICAgICB2YXIgY3VycmVudFN0ZXBXaXRoR290byA9IF9yZWFjdDJbJ2RlZmF1bHQnXS5jbG9uZUVsZW1lbnQoY3VycmVudFN0ZXAuY29tcG9uZW50LCB7XG5cdCAgICAgICAgZ290bzogdGhpcy5nb3RvLFxuXHQgICAgICAgIGFkZERhdGE6IHRoaXMuYWRkRGF0YSxcblx0ICAgICAgICBuYW1lOiBjdXJyZW50U3RlcC5uYW1lLFxuXHQgICAgICAgIHdpemFyZERhdGE6IHRoaXMucHJvcHMuZGF0YSxcblx0ICAgICAgICBwYXNzRGF0YTogdGhpcy5zdGF0ZS5kYXRhXG5cdCAgICAgIH0pO1xuXHQgICAgICBodG1sID0gX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoXG5cdCAgICAgICAgJ2RpdicsXG5cdCAgICAgICAgbnVsbCxcblx0ICAgICAgICBjdXJyZW50U3RlcFdpdGhHb3RvLFxuXHQgICAgICAgIHRoaXMuZ2V0QnV0dG9ucyhjdXJyZW50U3RlcC5kaXNhYmxlZEJ1dHRvbnMgfHwgW10sIHRoaXMuc3RhdGUuY3VycmVudFN0ZXBObywgbGVuZ3RoKVxuXHQgICAgICApO1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgaHRtbCA9IF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KFxuXHQgICAgICAgICdkaXYnLFxuXHQgICAgICAgIG51bGwsXG5cdCAgICAgICAgJ05vIHN0ZXBzIGhlcmUnXG5cdCAgICAgICk7XG5cdCAgICB9XG5cdCAgICByZXR1cm4gaHRtbDtcblx0ICB9XG5cdH0pO1xuXHRcblx0ZXhwb3J0cy5XaXphcmQgPSBXaXphcmQ7XG5cdHZhciBTdGVwID0gX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUNsYXNzKHtcblx0ICBkaXNwbGF5TmFtZTogJ1N0ZXAnLFxuXHRcblx0ICBnZXRJbml0aWFsU3RhdGU6IGZ1bmN0aW9uIGdldEluaXRpYWxTdGF0ZSgpIHtcblx0ICAgIHJldHVybiB7fTtcblx0ICB9LFxuXHQgIGdvdG86IGZ1bmN0aW9uIGdvdG8ocG9zaXRpb24pIHtcblx0ICAgIHRoaXMucHJvcHMuZ290byhwb3NpdGlvbik7XG5cdCAgfSxcblx0ICByZW5kZXJUeXBlOiBmdW5jdGlvbiByZW5kZXJUeXBlKCkge1xuXHQgICAgdmFyIF90aGlzID0gdGhpcztcblx0XG5cdCAgICBpZiAodGhpcy5wcm9wcy50eXBlID09PSAndGV4dCcpIHtcblx0ICAgICAgcmV0dXJuIF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KFxuXHQgICAgICAgICdkaXYnLFxuXHQgICAgICAgIG51bGwsXG5cdCAgICAgICAgdGhpcy5wcm9wcy50ZXh0XG5cdCAgICAgICk7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICB2YXIgY2hpbGRyZW5XaXRoR290byA9IF9yZWFjdDJbJ2RlZmF1bHQnXS5DaGlsZHJlbi5tYXAodGhpcy5wcm9wcy5jaGlsZHJlbiwgZnVuY3Rpb24gKGNoaWxkKSB7XG5cdCAgICAgICAgcmV0dXJuIF9yZWFjdDJbJ2RlZmF1bHQnXS5jbG9uZUVsZW1lbnQoY2hpbGQsIHsgZ290bzogX3RoaXMuZ290bywgYWRkRGF0YTogX3RoaXMucHJvcHMuYWRkRGF0YSB9KTtcblx0ICAgICAgfSk7XG5cdCAgICAgIHJldHVybiBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChcblx0ICAgICAgICAnZGl2Jyxcblx0ICAgICAgICBudWxsLFxuXHQgICAgICAgIGNoaWxkcmVuV2l0aEdvdG9cblx0ICAgICAgKTtcblx0ICAgIH1cblx0ICB9LFxuXHQgIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKCkge1xuXHQgICAgcmV0dXJuIF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KFxuXHQgICAgICAnZGl2Jyxcblx0ICAgICAgbnVsbCxcblx0ICAgICAgX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoXG5cdCAgICAgICAgJ2g1Jyxcblx0ICAgICAgICBudWxsLFxuXHQgICAgICAgIHRoaXMucHJvcHMubmFtZVxuXHQgICAgICApLFxuXHQgICAgICB0aGlzLnJlbmRlclR5cGUoKVxuXHQgICAgKTtcblx0ICB9XG5cdH0pO1xuXHRleHBvcnRzLlN0ZXAgPSBTdGVwO1xuXG4vKioqLyB9LFxuLyogMyAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0bW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiBfX3dlYnBhY2tfcmVxdWlyZV9fKDUpLCBfX2VzTW9kdWxlOiB0cnVlIH07XG5cbi8qKiovIH0sXG4vKiA0ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0XG5cdGV4cG9ydHNbXCJkZWZhdWx0XCJdID0gZnVuY3Rpb24gKG9iaikge1xuXHQgIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7XG5cdCAgICBcImRlZmF1bHRcIjogb2JqXG5cdCAgfTtcblx0fTtcblx0XG5cdGV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbi8qKiovIH0sXG4vKiA1ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRfX3dlYnBhY2tfcmVxdWlyZV9fKDE3KTtcblx0bW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpLk9iamVjdC5hc3NpZ247XG5cbi8qKiovIH0sXG4vKiA2ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHRtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcblx0ICBpZih0eXBlb2YgaXQgIT0gJ2Z1bmN0aW9uJyl0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhIGZ1bmN0aW9uIScpO1xuXHQgIHJldHVybiBpdDtcblx0fTtcblxuLyoqKi8gfSxcbi8qIDcgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdHZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XG5cdCAgcmV0dXJuIHRvU3RyaW5nLmNhbGwoaXQpLnNsaWNlKDgsIC0xKTtcblx0fTtcblxuLyoqKi8gfSxcbi8qIDggKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8vIG9wdGlvbmFsIC8gc2ltcGxlIGNvbnRleHQgYmluZGluZ1xuXHR2YXIgYUZ1bmN0aW9uID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2KTtcblx0bW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihmbiwgdGhhdCwgbGVuZ3RoKXtcblx0ICBhRnVuY3Rpb24oZm4pO1xuXHQgIGlmKHRoYXQgPT09IHVuZGVmaW5lZClyZXR1cm4gZm47XG5cdCAgc3dpdGNoKGxlbmd0aCl7XG5cdCAgICBjYXNlIDE6IHJldHVybiBmdW5jdGlvbihhKXtcblx0ICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSk7XG5cdCAgICB9O1xuXHQgICAgY2FzZSAyOiByZXR1cm4gZnVuY3Rpb24oYSwgYil7XG5cdCAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIpO1xuXHQgICAgfTtcblx0ICAgIGNhc2UgMzogcmV0dXJuIGZ1bmN0aW9uKGEsIGIsIGMpe1xuXHQgICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiLCBjKTtcblx0ICAgIH07XG5cdCAgfVxuXHQgIHJldHVybiBmdW5jdGlvbigvKiAuLi5hcmdzICovKXtcblx0ICAgIHJldHVybiBmbi5hcHBseSh0aGF0LCBhcmd1bWVudHMpO1xuXHQgIH07XG5cdH07XG5cbi8qKiovIH0sXG4vKiA5ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHQvLyA3LjIuMSBSZXF1aXJlT2JqZWN0Q29lcmNpYmxlKGFyZ3VtZW50KVxuXHRtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcblx0ICBpZihpdCA9PSB1bmRlZmluZWQpdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY2FsbCBtZXRob2Qgb24gIFwiICsgaXQpO1xuXHQgIHJldHVybiBpdDtcblx0fTtcblxuLyoqKi8gfSxcbi8qIDEwICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHR2YXIgZ2xvYmFsICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMilcblx0ICAsIGNvcmUgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMSlcblx0ICAsIGN0eCAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oOClcblx0ICAsIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xuXHRcblx0dmFyICRleHBvcnQgPSBmdW5jdGlvbih0eXBlLCBuYW1lLCBzb3VyY2Upe1xuXHQgIHZhciBJU19GT1JDRUQgPSB0eXBlICYgJGV4cG9ydC5GXG5cdCAgICAsIElTX0dMT0JBTCA9IHR5cGUgJiAkZXhwb3J0Lkdcblx0ICAgICwgSVNfU1RBVElDID0gdHlwZSAmICRleHBvcnQuU1xuXHQgICAgLCBJU19QUk9UTyAgPSB0eXBlICYgJGV4cG9ydC5QXG5cdCAgICAsIElTX0JJTkQgICA9IHR5cGUgJiAkZXhwb3J0LkJcblx0ICAgICwgSVNfV1JBUCAgID0gdHlwZSAmICRleHBvcnQuV1xuXHQgICAgLCBleHBvcnRzICAgPSBJU19HTE9CQUwgPyBjb3JlIDogY29yZVtuYW1lXSB8fCAoY29yZVtuYW1lXSA9IHt9KVxuXHQgICAgLCB0YXJnZXQgICAgPSBJU19HTE9CQUwgPyBnbG9iYWwgOiBJU19TVEFUSUMgPyBnbG9iYWxbbmFtZV0gOiAoZ2xvYmFsW25hbWVdIHx8IHt9KVtQUk9UT1RZUEVdXG5cdCAgICAsIGtleSwgb3duLCBvdXQ7XG5cdCAgaWYoSVNfR0xPQkFMKXNvdXJjZSA9IG5hbWU7XG5cdCAgZm9yKGtleSBpbiBzb3VyY2Upe1xuXHQgICAgLy8gY29udGFpbnMgaW4gbmF0aXZlXG5cdCAgICBvd24gPSAhSVNfRk9SQ0VEICYmIHRhcmdldCAmJiBrZXkgaW4gdGFyZ2V0O1xuXHQgICAgaWYob3duICYmIGtleSBpbiBleHBvcnRzKWNvbnRpbnVlO1xuXHQgICAgLy8gZXhwb3J0IG5hdGl2ZSBvciBwYXNzZWRcblx0ICAgIG91dCA9IG93biA/IHRhcmdldFtrZXldIDogc291cmNlW2tleV07XG5cdCAgICAvLyBwcmV2ZW50IGdsb2JhbCBwb2xsdXRpb24gZm9yIG5hbWVzcGFjZXNcblx0ICAgIGV4cG9ydHNba2V5XSA9IElTX0dMT0JBTCAmJiB0eXBlb2YgdGFyZ2V0W2tleV0gIT0gJ2Z1bmN0aW9uJyA/IHNvdXJjZVtrZXldXG5cdCAgICAvLyBiaW5kIHRpbWVycyB0byBnbG9iYWwgZm9yIGNhbGwgZnJvbSBleHBvcnQgY29udGV4dFxuXHQgICAgOiBJU19CSU5EICYmIG93biA/IGN0eChvdXQsIGdsb2JhbClcblx0ICAgIC8vIHdyYXAgZ2xvYmFsIGNvbnN0cnVjdG9ycyBmb3IgcHJldmVudCBjaGFuZ2UgdGhlbSBpbiBsaWJyYXJ5XG5cdCAgICA6IElTX1dSQVAgJiYgdGFyZ2V0W2tleV0gPT0gb3V0ID8gKGZ1bmN0aW9uKEMpe1xuXHQgICAgICB2YXIgRiA9IGZ1bmN0aW9uKHBhcmFtKXtcblx0ICAgICAgICByZXR1cm4gdGhpcyBpbnN0YW5jZW9mIEMgPyBuZXcgQyhwYXJhbSkgOiBDKHBhcmFtKTtcblx0ICAgICAgfTtcblx0ICAgICAgRltQUk9UT1RZUEVdID0gQ1tQUk9UT1RZUEVdO1xuXHQgICAgICByZXR1cm4gRjtcblx0ICAgIC8vIG1ha2Ugc3RhdGljIHZlcnNpb25zIGZvciBwcm90b3R5cGUgbWV0aG9kc1xuXHQgICAgfSkob3V0KSA6IElTX1BST1RPICYmIHR5cGVvZiBvdXQgPT0gJ2Z1bmN0aW9uJyA/IGN0eChGdW5jdGlvbi5jYWxsLCBvdXQpIDogb3V0O1xuXHQgICAgaWYoSVNfUFJPVE8pKGV4cG9ydHNbUFJPVE9UWVBFXSB8fCAoZXhwb3J0c1tQUk9UT1RZUEVdID0ge30pKVtrZXldID0gb3V0O1xuXHQgIH1cblx0fTtcblx0Ly8gdHlwZSBiaXRtYXBcblx0JGV4cG9ydC5GID0gMTsgIC8vIGZvcmNlZFxuXHQkZXhwb3J0LkcgPSAyOyAgLy8gZ2xvYmFsXG5cdCRleHBvcnQuUyA9IDQ7ICAvLyBzdGF0aWNcblx0JGV4cG9ydC5QID0gODsgIC8vIHByb3RvXG5cdCRleHBvcnQuQiA9IDE2OyAvLyBiaW5kXG5cdCRleHBvcnQuVyA9IDMyOyAvLyB3cmFwXG5cdG1vZHVsZS5leHBvcnRzID0gJGV4cG9ydDtcblxuLyoqKi8gfSxcbi8qIDExICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHRtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGV4ZWMpe1xuXHQgIHRyeSB7XG5cdCAgICByZXR1cm4gISFleGVjKCk7XG5cdCAgfSBjYXRjaChlKXtcblx0ICAgIHJldHVybiB0cnVlO1xuXHQgIH1cblx0fTtcblxuLyoqKi8gfSxcbi8qIDEyICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHQvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvODYjaXNzdWVjb21tZW50LTExNTc1OTAyOFxuXHR2YXIgZ2xvYmFsID0gbW9kdWxlLmV4cG9ydHMgPSB0eXBlb2Ygd2luZG93ICE9ICd1bmRlZmluZWQnICYmIHdpbmRvdy5NYXRoID09IE1hdGhcblx0ICA/IHdpbmRvdyA6IHR5cGVvZiBzZWxmICE9ICd1bmRlZmluZWQnICYmIHNlbGYuTWF0aCA9PSBNYXRoID8gc2VsZiA6IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cdGlmKHR5cGVvZiBfX2cgPT0gJ251bWJlcicpX19nID0gZ2xvYmFsOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG5cbi8qKiovIH0sXG4vKiAxMyAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0Ly8gZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBhbmQgbm9uLWVudW1lcmFibGUgb2xkIFY4IHN0cmluZ3Ncblx0dmFyIGNvZiA9IF9fd2VicGFja19yZXF1aXJlX18oNyk7XG5cdG1vZHVsZS5leHBvcnRzID0gT2JqZWN0KCd6JykucHJvcGVydHlJc0VudW1lcmFibGUoMCkgPyBPYmplY3QgOiBmdW5jdGlvbihpdCl7XG5cdCAgcmV0dXJuIGNvZihpdCkgPT0gJ1N0cmluZycgPyBpdC5zcGxpdCgnJykgOiBPYmplY3QoaXQpO1xuXHR9O1xuXG4vKioqLyB9LFxuLyogMTQgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdHZhciAkT2JqZWN0ID0gT2JqZWN0O1xuXHRtb2R1bGUuZXhwb3J0cyA9IHtcblx0ICBjcmVhdGU6ICAgICAkT2JqZWN0LmNyZWF0ZSxcblx0ICBnZXRQcm90bzogICAkT2JqZWN0LmdldFByb3RvdHlwZU9mLFxuXHQgIGlzRW51bTogICAgIHt9LnByb3BlcnR5SXNFbnVtZXJhYmxlLFxuXHQgIGdldERlc2M6ICAgICRPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yLFxuXHQgIHNldERlc2M6ICAgICRPYmplY3QuZGVmaW5lUHJvcGVydHksXG5cdCAgc2V0RGVzY3M6ICAgJE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzLFxuXHQgIGdldEtleXM6ICAgICRPYmplY3Qua2V5cyxcblx0ICBnZXROYW1lczogICAkT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMsXG5cdCAgZ2V0U3ltYm9sczogJE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMsXG5cdCAgZWFjaDogICAgICAgW10uZm9yRWFjaFxuXHR9O1xuXG4vKioqLyB9LFxuLyogMTUgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8vIDE5LjEuMi4xIE9iamVjdC5hc3NpZ24odGFyZ2V0LCBzb3VyY2UsIC4uLilcblx0dmFyICQgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNClcblx0ICAsIHRvT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNilcblx0ICAsIElPYmplY3QgID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMyk7XG5cdFxuXHQvLyBzaG91bGQgd29yayB3aXRoIHN5bWJvbHMgYW5kIHNob3VsZCBoYXZlIGRldGVybWluaXN0aWMgcHJvcGVydHkgb3JkZXIgKFY4IGJ1Zylcblx0bW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDExKShmdW5jdGlvbigpe1xuXHQgIHZhciBhID0gT2JqZWN0LmFzc2lnblxuXHQgICAgLCBBID0ge31cblx0ICAgICwgQiA9IHt9XG5cdCAgICAsIFMgPSBTeW1ib2woKVxuXHQgICAgLCBLID0gJ2FiY2RlZmdoaWprbG1ub3BxcnN0Jztcblx0ICBBW1NdID0gNztcblx0ICBLLnNwbGl0KCcnKS5mb3JFYWNoKGZ1bmN0aW9uKGspeyBCW2tdID0gazsgfSk7XG5cdCAgcmV0dXJuIGEoe30sIEEpW1NdICE9IDcgfHwgT2JqZWN0LmtleXMoYSh7fSwgQikpLmpvaW4oJycpICE9IEs7XG5cdH0pID8gZnVuY3Rpb24gYXNzaWduKHRhcmdldCwgc291cmNlKXsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuXHQgIHZhciBUICAgICA9IHRvT2JqZWN0KHRhcmdldClcblx0ICAgICwgJCQgICAgPSBhcmd1bWVudHNcblx0ICAgICwgJCRsZW4gPSAkJC5sZW5ndGhcblx0ICAgICwgaW5kZXggPSAxXG5cdCAgICAsIGdldEtleXMgICAgPSAkLmdldEtleXNcblx0ICAgICwgZ2V0U3ltYm9scyA9ICQuZ2V0U3ltYm9sc1xuXHQgICAgLCBpc0VudW0gICAgID0gJC5pc0VudW07XG5cdCAgd2hpbGUoJCRsZW4gPiBpbmRleCl7XG5cdCAgICB2YXIgUyAgICAgID0gSU9iamVjdCgkJFtpbmRleCsrXSlcblx0ICAgICAgLCBrZXlzICAgPSBnZXRTeW1ib2xzID8gZ2V0S2V5cyhTKS5jb25jYXQoZ2V0U3ltYm9scyhTKSkgOiBnZXRLZXlzKFMpXG5cdCAgICAgICwgbGVuZ3RoID0ga2V5cy5sZW5ndGhcblx0ICAgICAgLCBqICAgICAgPSAwXG5cdCAgICAgICwga2V5O1xuXHQgICAgd2hpbGUobGVuZ3RoID4gailpZihpc0VudW0uY2FsbChTLCBrZXkgPSBrZXlzW2orK10pKVRba2V5XSA9IFNba2V5XTtcblx0ICB9XG5cdCAgcmV0dXJuIFQ7XG5cdH0gOiBPYmplY3QuYXNzaWduO1xuXG4vKioqLyB9LFxuLyogMTYgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8vIDcuMS4xMyBUb09iamVjdChhcmd1bWVudClcblx0dmFyIGRlZmluZWQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDkpO1xuXHRtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcblx0ICByZXR1cm4gT2JqZWN0KGRlZmluZWQoaXQpKTtcblx0fTtcblxuLyoqKi8gfSxcbi8qIDE3ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvLyAxOS4xLjMuMSBPYmplY3QuYXNzaWduKHRhcmdldCwgc291cmNlKVxuXHR2YXIgJGV4cG9ydCA9IF9fd2VicGFja19yZXF1aXJlX18oMTApO1xuXHRcblx0JGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYsICdPYmplY3QnLCB7YXNzaWduOiBfX3dlYnBhY2tfcmVxdWlyZV9fKDE1KX0pO1xuXG4vKioqLyB9LFxuLyogMTggKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18oMTkpKCk7XG5cdC8vIGltcG9ydHNcblx0XG5cdFxuXHQvLyBtb2R1bGVcblx0ZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiXCIsIFwiXCJdKTtcblx0XG5cdC8vIGV4cG9ydHNcblxuXG4vKioqLyB9LFxuLyogMTkgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdC8qXHJcblx0XHRNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxyXG5cdFx0QXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxyXG5cdCovXHJcblx0Ly8gY3NzIGJhc2UgY29kZSwgaW5qZWN0ZWQgYnkgdGhlIGNzcy1sb2FkZXJcclxuXHRtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0dmFyIGxpc3QgPSBbXTtcclxuXHRcclxuXHRcdC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcclxuXHRcdGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcclxuXHRcdFx0dmFyIHJlc3VsdCA9IFtdO1xyXG5cdFx0XHRmb3IodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xyXG5cdFx0XHRcdHZhciBpdGVtID0gdGhpc1tpXTtcclxuXHRcdFx0XHRpZihpdGVtWzJdKSB7XHJcblx0XHRcdFx0XHRyZXN1bHQucHVzaChcIkBtZWRpYSBcIiArIGl0ZW1bMl0gKyBcIntcIiArIGl0ZW1bMV0gKyBcIn1cIik7XHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdHJlc3VsdC5wdXNoKGl0ZW1bMV0pO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gcmVzdWx0LmpvaW4oXCJcIik7XHJcblx0XHR9O1xyXG5cdFxyXG5cdFx0Ly8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcclxuXHRcdGxpc3QuaSA9IGZ1bmN0aW9uKG1vZHVsZXMsIG1lZGlhUXVlcnkpIHtcclxuXHRcdFx0aWYodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpXHJcblx0XHRcdFx0bW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgXCJcIl1dO1xyXG5cdFx0XHR2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xyXG5cdFx0XHRmb3IodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xyXG5cdFx0XHRcdHZhciBpZCA9IHRoaXNbaV1bMF07XHJcblx0XHRcdFx0aWYodHlwZW9mIGlkID09PSBcIm51bWJlclwiKVxyXG5cdFx0XHRcdFx0YWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xyXG5cdFx0XHR9XHJcblx0XHRcdGZvcihpID0gMDsgaSA8IG1vZHVsZXMubGVuZ3RoOyBpKyspIHtcclxuXHRcdFx0XHR2YXIgaXRlbSA9IG1vZHVsZXNbaV07XHJcblx0XHRcdFx0Ly8gc2tpcCBhbHJlYWR5IGltcG9ydGVkIG1vZHVsZVxyXG5cdFx0XHRcdC8vIHRoaXMgaW1wbGVtZW50YXRpb24gaXMgbm90IDEwMCUgcGVyZmVjdCBmb3Igd2VpcmQgbWVkaWEgcXVlcnkgY29tYmluYXRpb25zXHJcblx0XHRcdFx0Ly8gIHdoZW4gYSBtb2R1bGUgaXMgaW1wb3J0ZWQgbXVsdGlwbGUgdGltZXMgd2l0aCBkaWZmZXJlbnQgbWVkaWEgcXVlcmllcy5cclxuXHRcdFx0XHQvLyAgSSBob3BlIHRoaXMgd2lsbCBuZXZlciBvY2N1ciAoSGV5IHRoaXMgd2F5IHdlIGhhdmUgc21hbGxlciBidW5kbGVzKVxyXG5cdFx0XHRcdGlmKHR5cGVvZiBpdGVtWzBdICE9PSBcIm51bWJlclwiIHx8ICFhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XHJcblx0XHRcdFx0XHRpZihtZWRpYVF1ZXJ5ICYmICFpdGVtWzJdKSB7XHJcblx0XHRcdFx0XHRcdGl0ZW1bMl0gPSBtZWRpYVF1ZXJ5O1xyXG5cdFx0XHRcdFx0fSBlbHNlIGlmKG1lZGlhUXVlcnkpIHtcclxuXHRcdFx0XHRcdFx0aXRlbVsyXSA9IFwiKFwiICsgaXRlbVsyXSArIFwiKSBhbmQgKFwiICsgbWVkaWFRdWVyeSArIFwiKVwiO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0bGlzdC5wdXNoKGl0ZW0pO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fTtcclxuXHRcdHJldHVybiBsaXN0O1xyXG5cdH07XHJcblxuXG4vKioqLyB9LFxuLyogMjAgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8qXHJcblx0XHRNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxyXG5cdFx0QXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxyXG5cdCovXHJcblx0dmFyIHN0eWxlc0luRG9tID0ge30sXHJcblx0XHRtZW1vaXplID0gZnVuY3Rpb24oZm4pIHtcclxuXHRcdFx0dmFyIG1lbW87XHJcblx0XHRcdHJldHVybiBmdW5jdGlvbiAoKSB7XHJcblx0XHRcdFx0aWYgKHR5cGVvZiBtZW1vID09PSBcInVuZGVmaW5lZFwiKSBtZW1vID0gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxuXHRcdFx0XHRyZXR1cm4gbWVtbztcclxuXHRcdFx0fTtcclxuXHRcdH0sXHJcblx0XHRpc09sZElFID0gbWVtb2l6ZShmdW5jdGlvbigpIHtcclxuXHRcdFx0cmV0dXJuIC9tc2llIFs2LTldXFxiLy50ZXN0KHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkpO1xyXG5cdFx0fSksXHJcblx0XHRnZXRIZWFkRWxlbWVudCA9IG1lbW9pemUoZnVuY3Rpb24gKCkge1xyXG5cdFx0XHRyZXR1cm4gZG9jdW1lbnQuaGVhZCB8fCBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcImhlYWRcIilbMF07XHJcblx0XHR9KSxcclxuXHRcdHNpbmdsZXRvbkVsZW1lbnQgPSBudWxsLFxyXG5cdFx0c2luZ2xldG9uQ291bnRlciA9IDA7XHJcblx0XHJcblx0bW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihsaXN0LCBvcHRpb25zKSB7XHJcblx0XHRpZihmYWxzZSkge1xyXG5cdFx0XHRpZih0eXBlb2YgZG9jdW1lbnQgIT09IFwib2JqZWN0XCIpIHRocm93IG5ldyBFcnJvcihcIlRoZSBzdHlsZS1sb2FkZXIgY2Fubm90IGJlIHVzZWQgaW4gYSBub24tYnJvd3NlciBlbnZpcm9ubWVudFwiKTtcclxuXHRcdH1cclxuXHRcclxuXHRcdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xyXG5cdFx0Ly8gRm9yY2Ugc2luZ2xlLXRhZyBzb2x1dGlvbiBvbiBJRTYtOSwgd2hpY2ggaGFzIGEgaGFyZCBsaW1pdCBvbiB0aGUgIyBvZiA8c3R5bGU+XHJcblx0XHQvLyB0YWdzIGl0IHdpbGwgYWxsb3cgb24gYSBwYWdlXHJcblx0XHRpZiAodHlwZW9mIG9wdGlvbnMuc2luZ2xldG9uID09PSBcInVuZGVmaW5lZFwiKSBvcHRpb25zLnNpbmdsZXRvbiA9IGlzT2xkSUUoKTtcclxuXHRcclxuXHRcdHZhciBzdHlsZXMgPSBsaXN0VG9TdHlsZXMobGlzdCk7XHJcblx0XHRhZGRTdHlsZXNUb0RvbShzdHlsZXMsIG9wdGlvbnMpO1xyXG5cdFxyXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XHJcblx0XHRcdHZhciBtYXlSZW1vdmUgPSBbXTtcclxuXHRcdFx0Zm9yKHZhciBpID0gMDsgaSA8IHN0eWxlcy5sZW5ndGg7IGkrKykge1xyXG5cdFx0XHRcdHZhciBpdGVtID0gc3R5bGVzW2ldO1xyXG5cdFx0XHRcdHZhciBkb21TdHlsZSA9IHN0eWxlc0luRG9tW2l0ZW0uaWRdO1xyXG5cdFx0XHRcdGRvbVN0eWxlLnJlZnMtLTtcclxuXHRcdFx0XHRtYXlSZW1vdmUucHVzaChkb21TdHlsZSk7XHJcblx0XHRcdH1cclxuXHRcdFx0aWYobmV3TGlzdCkge1xyXG5cdFx0XHRcdHZhciBuZXdTdHlsZXMgPSBsaXN0VG9TdHlsZXMobmV3TGlzdCk7XHJcblx0XHRcdFx0YWRkU3R5bGVzVG9Eb20obmV3U3R5bGVzLCBvcHRpb25zKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRmb3IodmFyIGkgPSAwOyBpIDwgbWF5UmVtb3ZlLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdFx0dmFyIGRvbVN0eWxlID0gbWF5UmVtb3ZlW2ldO1xyXG5cdFx0XHRcdGlmKGRvbVN0eWxlLnJlZnMgPT09IDApIHtcclxuXHRcdFx0XHRcdGZvcih2YXIgaiA9IDA7IGogPCBkb21TdHlsZS5wYXJ0cy5sZW5ndGg7IGorKylcclxuXHRcdFx0XHRcdFx0ZG9tU3R5bGUucGFydHNbal0oKTtcclxuXHRcdFx0XHRcdGRlbGV0ZSBzdHlsZXNJbkRvbVtkb21TdHlsZS5pZF07XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9O1xyXG5cdH1cclxuXHRcclxuXHRmdW5jdGlvbiBhZGRTdHlsZXNUb0RvbShzdHlsZXMsIG9wdGlvbnMpIHtcclxuXHRcdGZvcih2YXIgaSA9IDA7IGkgPCBzdHlsZXMubGVuZ3RoOyBpKyspIHtcclxuXHRcdFx0dmFyIGl0ZW0gPSBzdHlsZXNbaV07XHJcblx0XHRcdHZhciBkb21TdHlsZSA9IHN0eWxlc0luRG9tW2l0ZW0uaWRdO1xyXG5cdFx0XHRpZihkb21TdHlsZSkge1xyXG5cdFx0XHRcdGRvbVN0eWxlLnJlZnMrKztcclxuXHRcdFx0XHRmb3IodmFyIGogPSAwOyBqIDwgZG9tU3R5bGUucGFydHMubGVuZ3RoOyBqKyspIHtcclxuXHRcdFx0XHRcdGRvbVN0eWxlLnBhcnRzW2pdKGl0ZW0ucGFydHNbal0pO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRmb3IoOyBqIDwgaXRlbS5wYXJ0cy5sZW5ndGg7IGorKykge1xyXG5cdFx0XHRcdFx0ZG9tU3R5bGUucGFydHMucHVzaChhZGRTdHlsZShpdGVtLnBhcnRzW2pdLCBvcHRpb25zKSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdHZhciBwYXJ0cyA9IFtdO1xyXG5cdFx0XHRcdGZvcih2YXIgaiA9IDA7IGogPCBpdGVtLnBhcnRzLmxlbmd0aDsgaisrKSB7XHJcblx0XHRcdFx0XHRwYXJ0cy5wdXNoKGFkZFN0eWxlKGl0ZW0ucGFydHNbal0sIG9wdGlvbnMpKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0c3R5bGVzSW5Eb21baXRlbS5pZF0gPSB7aWQ6IGl0ZW0uaWQsIHJlZnM6IDEsIHBhcnRzOiBwYXJ0c307XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblx0XHJcblx0ZnVuY3Rpb24gbGlzdFRvU3R5bGVzKGxpc3QpIHtcclxuXHRcdHZhciBzdHlsZXMgPSBbXTtcclxuXHRcdHZhciBuZXdTdHlsZXMgPSB7fTtcclxuXHRcdGZvcih2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdHZhciBpdGVtID0gbGlzdFtpXTtcclxuXHRcdFx0dmFyIGlkID0gaXRlbVswXTtcclxuXHRcdFx0dmFyIGNzcyA9IGl0ZW1bMV07XHJcblx0XHRcdHZhciBtZWRpYSA9IGl0ZW1bMl07XHJcblx0XHRcdHZhciBzb3VyY2VNYXAgPSBpdGVtWzNdO1xyXG5cdFx0XHR2YXIgcGFydCA9IHtjc3M6IGNzcywgbWVkaWE6IG1lZGlhLCBzb3VyY2VNYXA6IHNvdXJjZU1hcH07XHJcblx0XHRcdGlmKCFuZXdTdHlsZXNbaWRdKVxyXG5cdFx0XHRcdHN0eWxlcy5wdXNoKG5ld1N0eWxlc1tpZF0gPSB7aWQ6IGlkLCBwYXJ0czogW3BhcnRdfSk7XHJcblx0XHRcdGVsc2VcclxuXHRcdFx0XHRuZXdTdHlsZXNbaWRdLnBhcnRzLnB1c2gocGFydCk7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gc3R5bGVzO1xyXG5cdH1cclxuXHRcclxuXHRmdW5jdGlvbiBjcmVhdGVTdHlsZUVsZW1lbnQoKSB7XHJcblx0XHR2YXIgc3R5bGVFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xyXG5cdFx0dmFyIGhlYWQgPSBnZXRIZWFkRWxlbWVudCgpO1xyXG5cdFx0c3R5bGVFbGVtZW50LnR5cGUgPSBcInRleHQvY3NzXCI7XHJcblx0XHRoZWFkLmFwcGVuZENoaWxkKHN0eWxlRWxlbWVudCk7XHJcblx0XHRyZXR1cm4gc3R5bGVFbGVtZW50O1xyXG5cdH1cclxuXHRcclxuXHRmdW5jdGlvbiBjcmVhdGVMaW5rRWxlbWVudCgpIHtcclxuXHRcdHZhciBsaW5rRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsaW5rXCIpO1xyXG5cdFx0dmFyIGhlYWQgPSBnZXRIZWFkRWxlbWVudCgpO1xyXG5cdFx0bGlua0VsZW1lbnQucmVsID0gXCJzdHlsZXNoZWV0XCI7XHJcblx0XHRoZWFkLmFwcGVuZENoaWxkKGxpbmtFbGVtZW50KTtcclxuXHRcdHJldHVybiBsaW5rRWxlbWVudDtcclxuXHR9XHJcblx0XHJcblx0ZnVuY3Rpb24gYWRkU3R5bGUob2JqLCBvcHRpb25zKSB7XHJcblx0XHR2YXIgc3R5bGVFbGVtZW50LCB1cGRhdGUsIHJlbW92ZTtcclxuXHRcclxuXHRcdGlmIChvcHRpb25zLnNpbmdsZXRvbikge1xyXG5cdFx0XHR2YXIgc3R5bGVJbmRleCA9IHNpbmdsZXRvbkNvdW50ZXIrKztcclxuXHRcdFx0c3R5bGVFbGVtZW50ID0gc2luZ2xldG9uRWxlbWVudCB8fCAoc2luZ2xldG9uRWxlbWVudCA9IGNyZWF0ZVN0eWxlRWxlbWVudCgpKTtcclxuXHRcdFx0dXBkYXRlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlRWxlbWVudCwgc3R5bGVJbmRleCwgZmFsc2UpO1xyXG5cdFx0XHRyZW1vdmUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGVFbGVtZW50LCBzdHlsZUluZGV4LCB0cnVlKTtcclxuXHRcdH0gZWxzZSBpZihvYmouc291cmNlTWFwICYmXHJcblx0XHRcdHR5cGVvZiBVUkwgPT09IFwiZnVuY3Rpb25cIiAmJlxyXG5cdFx0XHR0eXBlb2YgVVJMLmNyZWF0ZU9iamVjdFVSTCA9PT0gXCJmdW5jdGlvblwiICYmXHJcblx0XHRcdHR5cGVvZiBVUkwucmV2b2tlT2JqZWN0VVJMID09PSBcImZ1bmN0aW9uXCIgJiZcclxuXHRcdFx0dHlwZW9mIEJsb2IgPT09IFwiZnVuY3Rpb25cIiAmJlxyXG5cdFx0XHR0eXBlb2YgYnRvYSA9PT0gXCJmdW5jdGlvblwiKSB7XHJcblx0XHRcdHN0eWxlRWxlbWVudCA9IGNyZWF0ZUxpbmtFbGVtZW50KCk7XHJcblx0XHRcdHVwZGF0ZSA9IHVwZGF0ZUxpbmsuYmluZChudWxsLCBzdHlsZUVsZW1lbnQpO1xyXG5cdFx0XHRyZW1vdmUgPSBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRzdHlsZUVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQpO1xyXG5cdFx0XHRcdGlmKHN0eWxlRWxlbWVudC5ocmVmKVxyXG5cdFx0XHRcdFx0VVJMLnJldm9rZU9iamVjdFVSTChzdHlsZUVsZW1lbnQuaHJlZik7XHJcblx0XHRcdH07XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRzdHlsZUVsZW1lbnQgPSBjcmVhdGVTdHlsZUVsZW1lbnQoKTtcclxuXHRcdFx0dXBkYXRlID0gYXBwbHlUb1RhZy5iaW5kKG51bGwsIHN0eWxlRWxlbWVudCk7XHJcblx0XHRcdHJlbW92ZSA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdHN0eWxlRWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudCk7XHJcblx0XHRcdH07XHJcblx0XHR9XHJcblx0XHJcblx0XHR1cGRhdGUob2JqKTtcclxuXHRcclxuXHRcdHJldHVybiBmdW5jdGlvbiB1cGRhdGVTdHlsZShuZXdPYmopIHtcclxuXHRcdFx0aWYobmV3T2JqKSB7XHJcblx0XHRcdFx0aWYobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwKVxyXG5cdFx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHRcdHVwZGF0ZShvYmogPSBuZXdPYmopO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdHJlbW92ZSgpO1xyXG5cdFx0XHR9XHJcblx0XHR9O1xyXG5cdH1cclxuXHRcclxuXHR2YXIgcmVwbGFjZVRleHQgPSAoZnVuY3Rpb24gKCkge1xyXG5cdFx0dmFyIHRleHRTdG9yZSA9IFtdO1xyXG5cdFxyXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIChpbmRleCwgcmVwbGFjZW1lbnQpIHtcclxuXHRcdFx0dGV4dFN0b3JlW2luZGV4XSA9IHJlcGxhY2VtZW50O1xyXG5cdFx0XHRyZXR1cm4gdGV4dFN0b3JlLmZpbHRlcihCb29sZWFuKS5qb2luKCdcXG4nKTtcclxuXHRcdH07XHJcblx0fSkoKTtcclxuXHRcclxuXHRmdW5jdGlvbiBhcHBseVRvU2luZ2xldG9uVGFnKHN0eWxlRWxlbWVudCwgaW5kZXgsIHJlbW92ZSwgb2JqKSB7XHJcblx0XHR2YXIgY3NzID0gcmVtb3ZlID8gXCJcIiA6IG9iai5jc3M7XHJcblx0XHJcblx0XHRpZiAoc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQpIHtcclxuXHRcdFx0c3R5bGVFbGVtZW50LnN0eWxlU2hlZXQuY3NzVGV4dCA9IHJlcGxhY2VUZXh0KGluZGV4LCBjc3MpO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0dmFyIGNzc05vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpO1xyXG5cdFx0XHR2YXIgY2hpbGROb2RlcyA9IHN0eWxlRWxlbWVudC5jaGlsZE5vZGVzO1xyXG5cdFx0XHRpZiAoY2hpbGROb2Rlc1tpbmRleF0pIHN0eWxlRWxlbWVudC5yZW1vdmVDaGlsZChjaGlsZE5vZGVzW2luZGV4XSk7XHJcblx0XHRcdGlmIChjaGlsZE5vZGVzLmxlbmd0aCkge1xyXG5cdFx0XHRcdHN0eWxlRWxlbWVudC5pbnNlcnRCZWZvcmUoY3NzTm9kZSwgY2hpbGROb2Rlc1tpbmRleF0pO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdHN0eWxlRWxlbWVudC5hcHBlbmRDaGlsZChjc3NOb2RlKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxuXHRcclxuXHRmdW5jdGlvbiBhcHBseVRvVGFnKHN0eWxlRWxlbWVudCwgb2JqKSB7XHJcblx0XHR2YXIgY3NzID0gb2JqLmNzcztcclxuXHRcdHZhciBtZWRpYSA9IG9iai5tZWRpYTtcclxuXHRcdHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xyXG5cdFxyXG5cdFx0aWYobWVkaWEpIHtcclxuXHRcdFx0c3R5bGVFbGVtZW50LnNldEF0dHJpYnV0ZShcIm1lZGlhXCIsIG1lZGlhKVxyXG5cdFx0fVxyXG5cdFxyXG5cdFx0aWYoc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQpIHtcclxuXHRcdFx0c3R5bGVFbGVtZW50LnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdHdoaWxlKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKSB7XHJcblx0XHRcdFx0c3R5bGVFbGVtZW50LnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRzdHlsZUVsZW1lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XHJcblx0XHR9XHJcblx0fVxyXG5cdFxyXG5cdGZ1bmN0aW9uIHVwZGF0ZUxpbmsobGlua0VsZW1lbnQsIG9iaikge1xyXG5cdFx0dmFyIGNzcyA9IG9iai5jc3M7XHJcblx0XHR2YXIgbWVkaWEgPSBvYmoubWVkaWE7XHJcblx0XHR2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcclxuXHRcclxuXHRcdGlmKHNvdXJjZU1hcCkge1xyXG5cdFx0XHQvLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yNjYwMzg3NVxyXG5cdFx0XHRjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiICsgYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSArIFwiICovXCI7XHJcblx0XHR9XHJcblx0XHJcblx0XHR2YXIgYmxvYiA9IG5ldyBCbG9iKFtjc3NdLCB7IHR5cGU6IFwidGV4dC9jc3NcIiB9KTtcclxuXHRcclxuXHRcdHZhciBvbGRTcmMgPSBsaW5rRWxlbWVudC5ocmVmO1xyXG5cdFxyXG5cdFx0bGlua0VsZW1lbnQuaHJlZiA9IFVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYik7XHJcblx0XHJcblx0XHRpZihvbGRTcmMpXHJcblx0XHRcdFVSTC5yZXZva2VPYmplY3RVUkwob2xkU3JjKTtcclxuXHR9XHJcblxuXG4vKioqLyB9LFxuLyogMjEgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8vIHN0eWxlLWxvYWRlcjogQWRkcyBzb21lIGNzcyB0byB0aGUgRE9NIGJ5IGFkZGluZyBhIDxzdHlsZT4gdGFnXG5cdFxuXHQvLyBsb2FkIHRoZSBzdHlsZXNcblx0dmFyIGNvbnRlbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE4KTtcblx0aWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cdC8vIGFkZCB0aGUgc3R5bGVzIHRvIHRoZSBET01cblx0dmFyIHVwZGF0ZSA9IF9fd2VicGFja19yZXF1aXJlX18oMjApKGNvbnRlbnQsIHt9KTtcblx0aWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG5cdC8vIEhvdCBNb2R1bGUgUmVwbGFjZW1lbnRcblx0aWYoZmFsc2UpIHtcblx0XHQvLyBXaGVuIHRoZSBzdHlsZXMgY2hhbmdlLCB1cGRhdGUgdGhlIDxzdHlsZT4gdGFnc1xuXHRcdGlmKCFjb250ZW50LmxvY2Fscykge1xuXHRcdFx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvaW5kZXguanM/b3V0cHV0U3R5bGU9ZXhwYW5kZWQmaW5jbHVkZVBhdGhzW109L1VzZXJzL3Bhdml0aHJhLmsvV29ya3NwYWNlL3dpemFyZC1vZi1vei9ib3dlcl9jb21wb25lbnRzJmluY2x1ZGVQYXRoc1tdPS9Vc2Vycy9wYXZpdGhyYS5rL1dvcmtzcGFjZS93aXphcmQtb2Ytb3ovbm9kZV9tb2R1bGVzIS4vd2l6YXJkLW9mLW96LnNjc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9pbmRleC5qcz9vdXRwdXRTdHlsZT1leHBhbmRlZCZpbmNsdWRlUGF0aHNbXT0vVXNlcnMvcGF2aXRocmEuay9Xb3Jrc3BhY2Uvd2l6YXJkLW9mLW96L2Jvd2VyX2NvbXBvbmVudHMmaW5jbHVkZVBhdGhzW109L1VzZXJzL3Bhdml0aHJhLmsvV29ya3NwYWNlL3dpemFyZC1vZi1vei9ub2RlX21vZHVsZXMhLi93aXphcmQtb2Ytb3ouc2Nzc1wiKTtcblx0XHRcdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cdFx0XHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0XHRcdH0pO1xuXHRcdH1cblx0XHQvLyBXaGVuIHRoZSBtb2R1bGUgaXMgZGlzcG9zZWQsIHJlbW92ZSB0aGUgPHN0eWxlPiB0YWdzXG5cdFx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG5cdH1cblxuLyoqKi8gfSxcbi8qIDIyICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHRtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfMjJfXztcblxuLyoqKi8gfVxuLyoqKioqKi8gXSlcbn0pO1xuO1xuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIHdpemFyZC1vZi1vei5qc1xuICoqLyIsIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKVxuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuXG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRleHBvcnRzOiB7fSxcbiBcdFx0XHRpZDogbW9kdWxlSWQsXG4gXHRcdFx0bG9hZGVkOiBmYWxzZVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sb2FkZWQgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogd2VicGFjay9ib290c3RyYXAgNGY3MGJlYzRmZTIxYTAzYzQzYWVcbiAqKi8iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vd2l6YXJkLW9mLW96LmpzeCcpO1xuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9saWIvaW5kZXguanNcbiAqKi8iLCJ2YXIgY29yZSA9IG1vZHVsZS5leHBvcnRzID0ge3ZlcnNpb246ICcxLjIuNid9O1xuaWYodHlwZW9mIF9fZSA9PSAnbnVtYmVyJylfX2UgPSBjb3JlOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvJC5jb3JlLmpzXG4gKiogbW9kdWxlIGlkID0gMVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCAnLi93aXphcmQtb2Ytb3ouc2Nzcyc7XG5cbmV4cG9ydCBjb25zdCBXaXphcmQgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIGdldEluaXRpYWxTdGF0ZSgpe1xuICAgIHJldHVybiB7XG4gICAgICAgIGN1cnJlbnRTdGVwTm86MCxcbiAgICAgICAgcHJldlN0ZXBObzotMSxcbiAgICAgICAgZGF0YTp7fVxuICAgIH1cblxuICB9LFxuICBnZXRCdXR0b25zKGRpc2FibGVkQnV0dG9ucywgaW5kZXgsIGxlbmd0aCl7XG4gICAgdmFyIGJhY2tldmVudEhhbmRsZXIgPSB0aGlzLmdvdG8uYmluZCh0aGlzLCAnYmFjaycpO1xuICAgIHZhciBuZXh0ZXZlbnRIYW5kbGVyID0gdGhpcy5nb3RvLmJpbmQodGhpcywgJ25leHQnKTtcbiAgICB2YXIgYmFja0J1dHRvbiA9IGluZGV4ID4gMCAmJiBkaXNhYmxlZEJ1dHRvbnMuaW5kZXhPZignYmFjaycpID09IC0xID9cbiAgICAgICg8YnV0dG9uIG9uQ2xpY2s9e2JhY2tldmVudEhhbmRsZXJ9PkJhY2s8L2J1dHRvbj4pIDogJyc7XG4gICAgdmFyIG5leHRCdXR0b24gPSBpbmRleCA8IGxlbmd0aCAtMSAmJiBkaXNhYmxlZEJ1dHRvbnMuaW5kZXhPZignbmV4dCcpID09IC0xID9cbiAgICAgICg8YnV0dG9uIG9uQ2xpY2s9e25leHRldmVudEhhbmRsZXJ9Pk5leHQ8L2J1dHRvbj4pIDogJydcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9J2J1dHRvbkNvbnRhaW5lcic+XG4gICAgICAgIHtiYWNrQnV0dG9ufVxuICAgICAgICB7bmV4dEJ1dHRvbn1cbiAgICAgIDwvZGl2PlxuICAgIClcbiAgfSxcbiAgZ290byhwb3NpdGlvbil7XG4gICAgdmFyIHN0ZXBzID0gdGhpcy5wcm9wcy5zdGVwcztcbiAgICB2YXIgeyBjdXJyZW50U3RlcE5vLCBwcmV2U3RlcE5vIH0gPSB0aGlzLnN0YXRlO1xuICAgIGlmKGN1cnJlbnRTdGVwTm8gPiAtMSAmJiBjdXJyZW50U3RlcE5vIDwgc3RlcHMubGVuZ3RoKXtcbiAgICAgIHZhciBuZXh0U3RlcE5vO1xuICAgICAgaWYoaXNOYU4ocGFyc2VJbnQocG9zaXRpb24pKSl7XG4gICAgICAgIHN3aXRjaChwb3NpdGlvbil7XG4gICAgICAgICAgY2FzZSAnYmFjaycgOlxuICAgICAgICAgICAgbmV4dFN0ZXBObyA9IHByZXZTdGVwTm8gPT09IC0xID8gY3VycmVudFN0ZXBObyAtIDEgOiBwcmV2U3RlcE5vO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnbmV4dCcgOlxuICAgICAgICAgICAgbmV4dFN0ZXBObyA9IGN1cnJlbnRTdGVwTm8gKyAxO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYocG9zaXRpb24gPiAtMSAmJiBwb3NpdGlvbiA8IHN0ZXBzLmxlbmd0aCAmJiBwb3NpdGlvbiAhPSBjdXJyZW50U3RlcE5vKXtcbiAgICAgICAgICBuZXh0U3RlcE5vID0gcG9zaXRpb25cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgY3VycmVudFN0ZXBObzogbmV4dFN0ZXBObyxcbiAgICAgICAgcHJldlN0ZXBObzogY3VycmVudFN0ZXBOb1xuICAgICAgfSlcblxuICAgIH0gZWxzZSB7XG4gICAgICBhbGVydCgnTm8gd2F5IScpXG4gICAgfVxuICB9LFxuICBhZGREYXRhKGRhdGEpe1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgZGF0YTogT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5zdGF0ZS5kYXRhLCBkYXRhKVxuICAgIH0pXG4gIH0sXG4gIHJlbmRlcigpe1xuICAgIHZhciBodG1sO1xuICAgIHZhciBzdGVwcyA9IHRoaXMucHJvcHMuc3RlcHM7XG4gICAgaWYoc3RlcHMgJiYgc3RlcHMubGVuZ3RoID4gMCl7XG4gICAgICAgIHZhciBsZW5ndGggPSBzdGVwcy5sZW5ndGg7XG4gICAgICAgIHZhciBjdXJyZW50U3RlcCA9IHN0ZXBzW3RoaXMuc3RhdGUuY3VycmVudFN0ZXBOb11cbiAgICAgICAgdmFyIGN1cnJlbnRTdGVwV2l0aEdvdG8gPSBSZWFjdC5jbG9uZUVsZW1lbnQoY3VycmVudFN0ZXAuY29tcG9uZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdvdG86dGhpcy5nb3RvLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkRGF0YTp0aGlzLmFkZERhdGEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBjdXJyZW50U3RlcC5uYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2l6YXJkRGF0YTogdGhpcy5wcm9wcy5kYXRhLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFzc0RhdGE6dGhpcy5zdGF0ZS5kYXRhXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgaHRtbCA9ICg8ZGl2PlxuICAgICAgICAgICAgICAgICAgICB7Y3VycmVudFN0ZXBXaXRoR290b31cbiAgICAgICAgICAgICAgICAgICAge3RoaXMuZ2V0QnV0dG9ucyhjdXJyZW50U3RlcC5kaXNhYmxlZEJ1dHRvbnMgfHwgW10sIHRoaXMuc3RhdGUuY3VycmVudFN0ZXBObywgbGVuZ3RoKX1cbiAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICApXG4gICAgfSBlbHNlIHtcbiAgICAgIGh0bWwgPSAoPGRpdj5ObyBzdGVwcyBoZXJlPC9kaXY+KVxuICAgIH1cbiAgICByZXR1cm4gaHRtbDtcbiAgfVxufSlcblxuZXhwb3J0IGNvbnN0IFN0ZXAgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIGdldEluaXRpYWxTdGF0ZSgpe1xuICAgIHJldHVybiB7XG5cbiAgICB9XG4gIH0sXG4gIGdvdG8ocG9zaXRpb24pe1xuICAgIHRoaXMucHJvcHMuZ290byhwb3NpdGlvbilcbiAgfSxcbiAgcmVuZGVyVHlwZSgpe1xuICAgIGlmKHRoaXMucHJvcHMudHlwZSA9PT0gJ3RleHQnKXtcbiAgICAgIHJldHVybig8ZGl2PlxuICAgICAgICB7dGhpcy5wcm9wcy50ZXh0fVxuICAgICAgPC9kaXY+KVxuXG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBjaGlsZHJlbldpdGhHb3RvID0gUmVhY3QuQ2hpbGRyZW4ubWFwKHRoaXMucHJvcHMuY2hpbGRyZW4sIChjaGlsZCkgPT4ge1xuICAgICAgICByZXR1cm4gUmVhY3QuY2xvbmVFbGVtZW50KGNoaWxkLCB7IGdvdG86IHRoaXMuZ290bywgYWRkRGF0YTogdGhpcy5wcm9wcy5hZGREYXRhIH0pO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gPGRpdj57Y2hpbGRyZW5XaXRoR290b308L2Rpdj5cbiAgICB9XG4gIH0sXG4gIHJlbmRlcigpe1xuICAgICAgcmV0dXJuICg8ZGl2PlxuICAgICAgICA8aDU+e3RoaXMucHJvcHMubmFtZX08L2g1PlxuICAgICAgICB7dGhpcy5yZW5kZXJUeXBlKCl9XG4gICAgICA8L2Rpdj4pXG5cbiAgfVxufSlcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vbGliL3dpemFyZC1vZi1vei5qc3hcbiAqKi8iLCJtb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2Fzc2lnblwiKSwgX19lc01vZHVsZTogdHJ1ZSB9O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvYXNzaWduLmpzXG4gKiogbW9kdWxlIGlkID0gM1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gZnVuY3Rpb24gKG9iaikge1xuICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDoge1xuICAgIFwiZGVmYXVsdFwiOiBvYmpcbiAgfTtcbn07XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vYmFiZWwtcnVudGltZS9oZWxwZXJzL2ludGVyb3AtcmVxdWlyZS1kZWZhdWx0LmpzXG4gKiogbW9kdWxlIGlkID0gNFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LmFzc2lnbicpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzLyQuY29yZScpLk9iamVjdC5hc3NpZ247XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9hc3NpZ24uanNcbiAqKiBtb2R1bGUgaWQgPSA1XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcbiAgaWYodHlwZW9mIGl0ICE9ICdmdW5jdGlvbicpdGhyb3cgVHlwZUVycm9yKGl0ICsgJyBpcyBub3QgYSBmdW5jdGlvbiEnKTtcbiAgcmV0dXJuIGl0O1xufTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy8kLmEtZnVuY3Rpb24uanNcbiAqKiBtb2R1bGUgaWQgPSA2XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJ2YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKGl0KS5zbGljZSg4LCAtMSk7XG59O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzLyQuY29mLmpzXG4gKiogbW9kdWxlIGlkID0gN1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLy8gb3B0aW9uYWwgLyBzaW1wbGUgY29udGV4dCBiaW5kaW5nXG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi8kLmEtZnVuY3Rpb24nKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oZm4sIHRoYXQsIGxlbmd0aCl7XG4gIGFGdW5jdGlvbihmbik7XG4gIGlmKHRoYXQgPT09IHVuZGVmaW5lZClyZXR1cm4gZm47XG4gIHN3aXRjaChsZW5ndGgpe1xuICAgIGNhc2UgMTogcmV0dXJuIGZ1bmN0aW9uKGEpe1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSk7XG4gICAgfTtcbiAgICBjYXNlIDI6IHJldHVybiBmdW5jdGlvbihhLCBiKXtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIpO1xuICAgIH07XG4gICAgY2FzZSAzOiByZXR1cm4gZnVuY3Rpb24oYSwgYiwgYyl7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiLCBjKTtcbiAgICB9O1xuICB9XG4gIHJldHVybiBmdW5jdGlvbigvKiAuLi5hcmdzICovKXtcbiAgICByZXR1cm4gZm4uYXBwbHkodGhhdCwgYXJndW1lbnRzKTtcbiAgfTtcbn07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvJC5jdHguanNcbiAqKiBtb2R1bGUgaWQgPSA4XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvLyA3LjIuMSBSZXF1aXJlT2JqZWN0Q29lcmNpYmxlKGFyZ3VtZW50KVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XG4gIGlmKGl0ID09IHVuZGVmaW5lZCl0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjYWxsIG1ldGhvZCBvbiAgXCIgKyBpdCk7XG4gIHJldHVybiBpdDtcbn07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvJC5kZWZpbmVkLmpzXG4gKiogbW9kdWxlIGlkID0gOVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwidmFyIGdsb2JhbCAgICA9IHJlcXVpcmUoJy4vJC5nbG9iYWwnKVxuICAsIGNvcmUgICAgICA9IHJlcXVpcmUoJy4vJC5jb3JlJylcbiAgLCBjdHggICAgICAgPSByZXF1aXJlKCcuLyQuY3R4JylcbiAgLCBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcblxudmFyICRleHBvcnQgPSBmdW5jdGlvbih0eXBlLCBuYW1lLCBzb3VyY2Upe1xuICB2YXIgSVNfRk9SQ0VEID0gdHlwZSAmICRleHBvcnQuRlxuICAgICwgSVNfR0xPQkFMID0gdHlwZSAmICRleHBvcnQuR1xuICAgICwgSVNfU1RBVElDID0gdHlwZSAmICRleHBvcnQuU1xuICAgICwgSVNfUFJPVE8gID0gdHlwZSAmICRleHBvcnQuUFxuICAgICwgSVNfQklORCAgID0gdHlwZSAmICRleHBvcnQuQlxuICAgICwgSVNfV1JBUCAgID0gdHlwZSAmICRleHBvcnQuV1xuICAgICwgZXhwb3J0cyAgID0gSVNfR0xPQkFMID8gY29yZSA6IGNvcmVbbmFtZV0gfHwgKGNvcmVbbmFtZV0gPSB7fSlcbiAgICAsIHRhcmdldCAgICA9IElTX0dMT0JBTCA/IGdsb2JhbCA6IElTX1NUQVRJQyA/IGdsb2JhbFtuYW1lXSA6IChnbG9iYWxbbmFtZV0gfHwge30pW1BST1RPVFlQRV1cbiAgICAsIGtleSwgb3duLCBvdXQ7XG4gIGlmKElTX0dMT0JBTClzb3VyY2UgPSBuYW1lO1xuICBmb3Ioa2V5IGluIHNvdXJjZSl7XG4gICAgLy8gY29udGFpbnMgaW4gbmF0aXZlXG4gICAgb3duID0gIUlTX0ZPUkNFRCAmJiB0YXJnZXQgJiYga2V5IGluIHRhcmdldDtcbiAgICBpZihvd24gJiYga2V5IGluIGV4cG9ydHMpY29udGludWU7XG4gICAgLy8gZXhwb3J0IG5hdGl2ZSBvciBwYXNzZWRcbiAgICBvdXQgPSBvd24gPyB0YXJnZXRba2V5XSA6IHNvdXJjZVtrZXldO1xuICAgIC8vIHByZXZlbnQgZ2xvYmFsIHBvbGx1dGlvbiBmb3IgbmFtZXNwYWNlc1xuICAgIGV4cG9ydHNba2V5XSA9IElTX0dMT0JBTCAmJiB0eXBlb2YgdGFyZ2V0W2tleV0gIT0gJ2Z1bmN0aW9uJyA/IHNvdXJjZVtrZXldXG4gICAgLy8gYmluZCB0aW1lcnMgdG8gZ2xvYmFsIGZvciBjYWxsIGZyb20gZXhwb3J0IGNvbnRleHRcbiAgICA6IElTX0JJTkQgJiYgb3duID8gY3R4KG91dCwgZ2xvYmFsKVxuICAgIC8vIHdyYXAgZ2xvYmFsIGNvbnN0cnVjdG9ycyBmb3IgcHJldmVudCBjaGFuZ2UgdGhlbSBpbiBsaWJyYXJ5XG4gICAgOiBJU19XUkFQICYmIHRhcmdldFtrZXldID09IG91dCA/IChmdW5jdGlvbihDKXtcbiAgICAgIHZhciBGID0gZnVuY3Rpb24ocGFyYW0pe1xuICAgICAgICByZXR1cm4gdGhpcyBpbnN0YW5jZW9mIEMgPyBuZXcgQyhwYXJhbSkgOiBDKHBhcmFtKTtcbiAgICAgIH07XG4gICAgICBGW1BST1RPVFlQRV0gPSBDW1BST1RPVFlQRV07XG4gICAgICByZXR1cm4gRjtcbiAgICAvLyBtYWtlIHN0YXRpYyB2ZXJzaW9ucyBmb3IgcHJvdG90eXBlIG1ldGhvZHNcbiAgICB9KShvdXQpIDogSVNfUFJPVE8gJiYgdHlwZW9mIG91dCA9PSAnZnVuY3Rpb24nID8gY3R4KEZ1bmN0aW9uLmNhbGwsIG91dCkgOiBvdXQ7XG4gICAgaWYoSVNfUFJPVE8pKGV4cG9ydHNbUFJPVE9UWVBFXSB8fCAoZXhwb3J0c1tQUk9UT1RZUEVdID0ge30pKVtrZXldID0gb3V0O1xuICB9XG59O1xuLy8gdHlwZSBiaXRtYXBcbiRleHBvcnQuRiA9IDE7ICAvLyBmb3JjZWRcbiRleHBvcnQuRyA9IDI7ICAvLyBnbG9iYWxcbiRleHBvcnQuUyA9IDQ7ICAvLyBzdGF0aWNcbiRleHBvcnQuUCA9IDg7ICAvLyBwcm90b1xuJGV4cG9ydC5CID0gMTY7IC8vIGJpbmRcbiRleHBvcnQuVyA9IDMyOyAvLyB3cmFwXG5tb2R1bGUuZXhwb3J0cyA9ICRleHBvcnQ7XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvJC5leHBvcnQuanNcbiAqKiBtb2R1bGUgaWQgPSAxMFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihleGVjKXtcbiAgdHJ5IHtcbiAgICByZXR1cm4gISFleGVjKCk7XG4gIH0gY2F0Y2goZSl7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvJC5mYWlscy5qc1xuICoqIG1vZHVsZSBpZCA9IDExXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvODYjaXNzdWVjb21tZW50LTExNTc1OTAyOFxudmFyIGdsb2JhbCA9IG1vZHVsZS5leHBvcnRzID0gdHlwZW9mIHdpbmRvdyAhPSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuTWF0aCA9PSBNYXRoXG4gID8gd2luZG93IDogdHlwZW9mIHNlbGYgIT0gJ3VuZGVmaW5lZCcgJiYgc2VsZi5NYXRoID09IE1hdGggPyBzZWxmIDogRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcbmlmKHR5cGVvZiBfX2cgPT0gJ251bWJlcicpX19nID0gZ2xvYmFsOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvJC5nbG9iYWwuanNcbiAqKiBtb2R1bGUgaWQgPSAxMlxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLy8gZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBhbmQgbm9uLWVudW1lcmFibGUgb2xkIFY4IHN0cmluZ3NcbnZhciBjb2YgPSByZXF1aXJlKCcuLyQuY29mJyk7XG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdCgneicpLnByb3BlcnR5SXNFbnVtZXJhYmxlKDApID8gT2JqZWN0IDogZnVuY3Rpb24oaXQpe1xuICByZXR1cm4gY29mKGl0KSA9PSAnU3RyaW5nJyA/IGl0LnNwbGl0KCcnKSA6IE9iamVjdChpdCk7XG59O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzLyQuaW9iamVjdC5qc1xuICoqIG1vZHVsZSBpZCA9IDEzXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJ2YXIgJE9iamVjdCA9IE9iamVjdDtcbm1vZHVsZS5leHBvcnRzID0ge1xuICBjcmVhdGU6ICAgICAkT2JqZWN0LmNyZWF0ZSxcbiAgZ2V0UHJvdG86ICAgJE9iamVjdC5nZXRQcm90b3R5cGVPZixcbiAgaXNFbnVtOiAgICAge30ucHJvcGVydHlJc0VudW1lcmFibGUsXG4gIGdldERlc2M6ICAgICRPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yLFxuICBzZXREZXNjOiAgICAkT2JqZWN0LmRlZmluZVByb3BlcnR5LFxuICBzZXREZXNjczogICAkT2JqZWN0LmRlZmluZVByb3BlcnRpZXMsXG4gIGdldEtleXM6ICAgICRPYmplY3Qua2V5cyxcbiAgZ2V0TmFtZXM6ICAgJE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzLFxuICBnZXRTeW1ib2xzOiAkT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyxcbiAgZWFjaDogICAgICAgW10uZm9yRWFjaFxufTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy8kLmpzXG4gKiogbW9kdWxlIGlkID0gMTRcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIi8vIDE5LjEuMi4xIE9iamVjdC5hc3NpZ24odGFyZ2V0LCBzb3VyY2UsIC4uLilcbnZhciAkICAgICAgICA9IHJlcXVpcmUoJy4vJCcpXG4gICwgdG9PYmplY3QgPSByZXF1aXJlKCcuLyQudG8tb2JqZWN0JylcbiAgLCBJT2JqZWN0ICA9IHJlcXVpcmUoJy4vJC5pb2JqZWN0Jyk7XG5cbi8vIHNob3VsZCB3b3JrIHdpdGggc3ltYm9scyBhbmQgc2hvdWxkIGhhdmUgZGV0ZXJtaW5pc3RpYyBwcm9wZXJ0eSBvcmRlciAoVjggYnVnKVxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLyQuZmFpbHMnKShmdW5jdGlvbigpe1xuICB2YXIgYSA9IE9iamVjdC5hc3NpZ25cbiAgICAsIEEgPSB7fVxuICAgICwgQiA9IHt9XG4gICAgLCBTID0gU3ltYm9sKClcbiAgICAsIEsgPSAnYWJjZGVmZ2hpamtsbW5vcHFyc3QnO1xuICBBW1NdID0gNztcbiAgSy5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbihrKXsgQltrXSA9IGs7IH0pO1xuICByZXR1cm4gYSh7fSwgQSlbU10gIT0gNyB8fCBPYmplY3Qua2V5cyhhKHt9LCBCKSkuam9pbignJykgIT0gSztcbn0pID8gZnVuY3Rpb24gYXNzaWduKHRhcmdldCwgc291cmNlKXsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICB2YXIgVCAgICAgPSB0b09iamVjdCh0YXJnZXQpXG4gICAgLCAkJCAgICA9IGFyZ3VtZW50c1xuICAgICwgJCRsZW4gPSAkJC5sZW5ndGhcbiAgICAsIGluZGV4ID0gMVxuICAgICwgZ2V0S2V5cyAgICA9ICQuZ2V0S2V5c1xuICAgICwgZ2V0U3ltYm9scyA9ICQuZ2V0U3ltYm9sc1xuICAgICwgaXNFbnVtICAgICA9ICQuaXNFbnVtO1xuICB3aGlsZSgkJGxlbiA+IGluZGV4KXtcbiAgICB2YXIgUyAgICAgID0gSU9iamVjdCgkJFtpbmRleCsrXSlcbiAgICAgICwga2V5cyAgID0gZ2V0U3ltYm9scyA/IGdldEtleXMoUykuY29uY2F0KGdldFN5bWJvbHMoUykpIDogZ2V0S2V5cyhTKVxuICAgICAgLCBsZW5ndGggPSBrZXlzLmxlbmd0aFxuICAgICAgLCBqICAgICAgPSAwXG4gICAgICAsIGtleTtcbiAgICB3aGlsZShsZW5ndGggPiBqKWlmKGlzRW51bS5jYWxsKFMsIGtleSA9IGtleXNbaisrXSkpVFtrZXldID0gU1trZXldO1xuICB9XG4gIHJldHVybiBUO1xufSA6IE9iamVjdC5hc3NpZ247XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvJC5vYmplY3QtYXNzaWduLmpzXG4gKiogbW9kdWxlIGlkID0gMTVcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIi8vIDcuMS4xMyBUb09iamVjdChhcmd1bWVudClcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi8kLmRlZmluZWQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xuICByZXR1cm4gT2JqZWN0KGRlZmluZWQoaXQpKTtcbn07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvJC50by1vYmplY3QuanNcbiAqKiBtb2R1bGUgaWQgPSAxNlxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLy8gMTkuMS4zLjEgT2JqZWN0LmFzc2lnbih0YXJnZXQsIHNvdXJjZSlcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi8kLmV4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiwgJ09iamVjdCcsIHthc3NpZ246IHJlcXVpcmUoJy4vJC5vYmplY3QtYXNzaWduJyl9KTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYub2JqZWN0LmFzc2lnbi5qc1xuICoqIG1vZHVsZSBpZCA9IDE3XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanNcIikoKTtcbi8vIGltcG9ydHNcblxuXG4vLyBtb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIlwiLCBcIlwiXSk7XG5cbi8vIGV4cG9ydHNcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2Nzcy1sb2FkZXIhLi9+L3Nhc3MtbG9hZGVyP291dHB1dFN0eWxlPWV4cGFuZGVkJmluY2x1ZGVQYXRoc1tdPS9Vc2Vycy9wYXZpdGhyYS5rL1dvcmtzcGFjZS93aXphcmQtb2Ytb3ovYm93ZXJfY29tcG9uZW50cyZpbmNsdWRlUGF0aHNbXT0vVXNlcnMvcGF2aXRocmEuay9Xb3Jrc3BhY2Uvd2l6YXJkLW9mLW96L25vZGVfbW9kdWxlcyEuL2xpYi93aXphcmQtb2Ytb3ouc2Nzc1xuICoqIG1vZHVsZSBpZCA9IDE4XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvKlxyXG5cdE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXHJcblx0QXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxyXG4qL1xyXG4vLyBjc3MgYmFzZSBjb2RlLCBpbmplY3RlZCBieSB0aGUgY3NzLWxvYWRlclxyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xyXG5cdHZhciBsaXN0ID0gW107XHJcblxyXG5cdC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcclxuXHRsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XHJcblx0XHR2YXIgcmVzdWx0ID0gW107XHJcblx0XHRmb3IodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xyXG5cdFx0XHR2YXIgaXRlbSA9IHRoaXNbaV07XHJcblx0XHRcdGlmKGl0ZW1bMl0pIHtcclxuXHRcdFx0XHRyZXN1bHQucHVzaChcIkBtZWRpYSBcIiArIGl0ZW1bMl0gKyBcIntcIiArIGl0ZW1bMV0gKyBcIn1cIik7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0cmVzdWx0LnB1c2goaXRlbVsxXSk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcdHJldHVybiByZXN1bHQuam9pbihcIlwiKTtcclxuXHR9O1xyXG5cclxuXHQvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxyXG5cdGxpc3QuaSA9IGZ1bmN0aW9uKG1vZHVsZXMsIG1lZGlhUXVlcnkpIHtcclxuXHRcdGlmKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKVxyXG5cdFx0XHRtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCBcIlwiXV07XHJcblx0XHR2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xyXG5cdFx0Zm9yKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcclxuXHRcdFx0dmFyIGlkID0gdGhpc1tpXVswXTtcclxuXHRcdFx0aWYodHlwZW9mIGlkID09PSBcIm51bWJlclwiKVxyXG5cdFx0XHRcdGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcclxuXHRcdH1cclxuXHRcdGZvcihpID0gMDsgaSA8IG1vZHVsZXMubGVuZ3RoOyBpKyspIHtcclxuXHRcdFx0dmFyIGl0ZW0gPSBtb2R1bGVzW2ldO1xyXG5cdFx0XHQvLyBza2lwIGFscmVhZHkgaW1wb3J0ZWQgbW9kdWxlXHJcblx0XHRcdC8vIHRoaXMgaW1wbGVtZW50YXRpb24gaXMgbm90IDEwMCUgcGVyZmVjdCBmb3Igd2VpcmQgbWVkaWEgcXVlcnkgY29tYmluYXRpb25zXHJcblx0XHRcdC8vICB3aGVuIGEgbW9kdWxlIGlzIGltcG9ydGVkIG11bHRpcGxlIHRpbWVzIHdpdGggZGlmZmVyZW50IG1lZGlhIHF1ZXJpZXMuXHJcblx0XHRcdC8vICBJIGhvcGUgdGhpcyB3aWxsIG5ldmVyIG9jY3VyIChIZXkgdGhpcyB3YXkgd2UgaGF2ZSBzbWFsbGVyIGJ1bmRsZXMpXHJcblx0XHRcdGlmKHR5cGVvZiBpdGVtWzBdICE9PSBcIm51bWJlclwiIHx8ICFhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XHJcblx0XHRcdFx0aWYobWVkaWFRdWVyeSAmJiAhaXRlbVsyXSkge1xyXG5cdFx0XHRcdFx0aXRlbVsyXSA9IG1lZGlhUXVlcnk7XHJcblx0XHRcdFx0fSBlbHNlIGlmKG1lZGlhUXVlcnkpIHtcclxuXHRcdFx0XHRcdGl0ZW1bMl0gPSBcIihcIiArIGl0ZW1bMl0gKyBcIikgYW5kIChcIiArIG1lZGlhUXVlcnkgKyBcIilcIjtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0bGlzdC5wdXNoKGl0ZW0pO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fTtcclxuXHRyZXR1cm4gbGlzdDtcclxufTtcclxuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanNcbiAqKiBtb2R1bGUgaWQgPSAxOVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLypcclxuXHRNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxyXG5cdEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcclxuKi9cclxudmFyIHN0eWxlc0luRG9tID0ge30sXHJcblx0bWVtb2l6ZSA9IGZ1bmN0aW9uKGZuKSB7XHJcblx0XHR2YXIgbWVtbztcclxuXHRcdHJldHVybiBmdW5jdGlvbiAoKSB7XHJcblx0XHRcdGlmICh0eXBlb2YgbWVtbyA9PT0gXCJ1bmRlZmluZWRcIikgbWVtbyA9IGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcblx0XHRcdHJldHVybiBtZW1vO1xyXG5cdFx0fTtcclxuXHR9LFxyXG5cdGlzT2xkSUUgPSBtZW1vaXplKGZ1bmN0aW9uKCkge1xyXG5cdFx0cmV0dXJuIC9tc2llIFs2LTldXFxiLy50ZXN0KHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkpO1xyXG5cdH0pLFxyXG5cdGdldEhlYWRFbGVtZW50ID0gbWVtb2l6ZShmdW5jdGlvbiAoKSB7XHJcblx0XHRyZXR1cm4gZG9jdW1lbnQuaGVhZCB8fCBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcImhlYWRcIilbMF07XHJcblx0fSksXHJcblx0c2luZ2xldG9uRWxlbWVudCA9IG51bGwsXHJcblx0c2luZ2xldG9uQ291bnRlciA9IDA7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGxpc3QsIG9wdGlvbnMpIHtcclxuXHRpZih0eXBlb2YgREVCVUcgIT09IFwidW5kZWZpbmVkXCIgJiYgREVCVUcpIHtcclxuXHRcdGlmKHR5cGVvZiBkb2N1bWVudCAhPT0gXCJvYmplY3RcIikgdGhyb3cgbmV3IEVycm9yKFwiVGhlIHN0eWxlLWxvYWRlciBjYW5ub3QgYmUgdXNlZCBpbiBhIG5vbi1icm93c2VyIGVudmlyb25tZW50XCIpO1xyXG5cdH1cclxuXHJcblx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XHJcblx0Ly8gRm9yY2Ugc2luZ2xlLXRhZyBzb2x1dGlvbiBvbiBJRTYtOSwgd2hpY2ggaGFzIGEgaGFyZCBsaW1pdCBvbiB0aGUgIyBvZiA8c3R5bGU+XHJcblx0Ly8gdGFncyBpdCB3aWxsIGFsbG93IG9uIGEgcGFnZVxyXG5cdGlmICh0eXBlb2Ygb3B0aW9ucy5zaW5nbGV0b24gPT09IFwidW5kZWZpbmVkXCIpIG9wdGlvbnMuc2luZ2xldG9uID0gaXNPbGRJRSgpO1xyXG5cclxuXHR2YXIgc3R5bGVzID0gbGlzdFRvU3R5bGVzKGxpc3QpO1xyXG5cdGFkZFN0eWxlc1RvRG9tKHN0eWxlcywgb3B0aW9ucyk7XHJcblxyXG5cdHJldHVybiBmdW5jdGlvbiB1cGRhdGUobmV3TGlzdCkge1xyXG5cdFx0dmFyIG1heVJlbW92ZSA9IFtdO1xyXG5cdFx0Zm9yKHZhciBpID0gMDsgaSA8IHN0eWxlcy5sZW5ndGg7IGkrKykge1xyXG5cdFx0XHR2YXIgaXRlbSA9IHN0eWxlc1tpXTtcclxuXHRcdFx0dmFyIGRvbVN0eWxlID0gc3R5bGVzSW5Eb21baXRlbS5pZF07XHJcblx0XHRcdGRvbVN0eWxlLnJlZnMtLTtcclxuXHRcdFx0bWF5UmVtb3ZlLnB1c2goZG9tU3R5bGUpO1xyXG5cdFx0fVxyXG5cdFx0aWYobmV3TGlzdCkge1xyXG5cdFx0XHR2YXIgbmV3U3R5bGVzID0gbGlzdFRvU3R5bGVzKG5ld0xpc3QpO1xyXG5cdFx0XHRhZGRTdHlsZXNUb0RvbShuZXdTdHlsZXMsIG9wdGlvbnMpO1xyXG5cdFx0fVxyXG5cdFx0Zm9yKHZhciBpID0gMDsgaSA8IG1heVJlbW92ZS5sZW5ndGg7IGkrKykge1xyXG5cdFx0XHR2YXIgZG9tU3R5bGUgPSBtYXlSZW1vdmVbaV07XHJcblx0XHRcdGlmKGRvbVN0eWxlLnJlZnMgPT09IDApIHtcclxuXHRcdFx0XHRmb3IodmFyIGogPSAwOyBqIDwgZG9tU3R5bGUucGFydHMubGVuZ3RoOyBqKyspXHJcblx0XHRcdFx0XHRkb21TdHlsZS5wYXJ0c1tqXSgpO1xyXG5cdFx0XHRcdGRlbGV0ZSBzdHlsZXNJbkRvbVtkb21TdHlsZS5pZF07XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9O1xyXG59XHJcblxyXG5mdW5jdGlvbiBhZGRTdHlsZXNUb0RvbShzdHlsZXMsIG9wdGlvbnMpIHtcclxuXHRmb3IodmFyIGkgPSAwOyBpIDwgc3R5bGVzLmxlbmd0aDsgaSsrKSB7XHJcblx0XHR2YXIgaXRlbSA9IHN0eWxlc1tpXTtcclxuXHRcdHZhciBkb21TdHlsZSA9IHN0eWxlc0luRG9tW2l0ZW0uaWRdO1xyXG5cdFx0aWYoZG9tU3R5bGUpIHtcclxuXHRcdFx0ZG9tU3R5bGUucmVmcysrO1xyXG5cdFx0XHRmb3IodmFyIGogPSAwOyBqIDwgZG9tU3R5bGUucGFydHMubGVuZ3RoOyBqKyspIHtcclxuXHRcdFx0XHRkb21TdHlsZS5wYXJ0c1tqXShpdGVtLnBhcnRzW2pdKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRmb3IoOyBqIDwgaXRlbS5wYXJ0cy5sZW5ndGg7IGorKykge1xyXG5cdFx0XHRcdGRvbVN0eWxlLnBhcnRzLnB1c2goYWRkU3R5bGUoaXRlbS5wYXJ0c1tqXSwgb3B0aW9ucykpO1xyXG5cdFx0XHR9XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHR2YXIgcGFydHMgPSBbXTtcclxuXHRcdFx0Zm9yKHZhciBqID0gMDsgaiA8IGl0ZW0ucGFydHMubGVuZ3RoOyBqKyspIHtcclxuXHRcdFx0XHRwYXJ0cy5wdXNoKGFkZFN0eWxlKGl0ZW0ucGFydHNbal0sIG9wdGlvbnMpKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRzdHlsZXNJbkRvbVtpdGVtLmlkXSA9IHtpZDogaXRlbS5pZCwgcmVmczogMSwgcGFydHM6IHBhcnRzfTtcclxuXHRcdH1cclxuXHR9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGxpc3RUb1N0eWxlcyhsaXN0KSB7XHJcblx0dmFyIHN0eWxlcyA9IFtdO1xyXG5cdHZhciBuZXdTdHlsZXMgPSB7fTtcclxuXHRmb3IodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xyXG5cdFx0dmFyIGl0ZW0gPSBsaXN0W2ldO1xyXG5cdFx0dmFyIGlkID0gaXRlbVswXTtcclxuXHRcdHZhciBjc3MgPSBpdGVtWzFdO1xyXG5cdFx0dmFyIG1lZGlhID0gaXRlbVsyXTtcclxuXHRcdHZhciBzb3VyY2VNYXAgPSBpdGVtWzNdO1xyXG5cdFx0dmFyIHBhcnQgPSB7Y3NzOiBjc3MsIG1lZGlhOiBtZWRpYSwgc291cmNlTWFwOiBzb3VyY2VNYXB9O1xyXG5cdFx0aWYoIW5ld1N0eWxlc1tpZF0pXHJcblx0XHRcdHN0eWxlcy5wdXNoKG5ld1N0eWxlc1tpZF0gPSB7aWQ6IGlkLCBwYXJ0czogW3BhcnRdfSk7XHJcblx0XHRlbHNlXHJcblx0XHRcdG5ld1N0eWxlc1tpZF0ucGFydHMucHVzaChwYXJ0KTtcclxuXHR9XHJcblx0cmV0dXJuIHN0eWxlcztcclxufVxyXG5cclxuZnVuY3Rpb24gY3JlYXRlU3R5bGVFbGVtZW50KCkge1xyXG5cdHZhciBzdHlsZUVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XHJcblx0dmFyIGhlYWQgPSBnZXRIZWFkRWxlbWVudCgpO1xyXG5cdHN0eWxlRWxlbWVudC50eXBlID0gXCJ0ZXh0L2Nzc1wiO1xyXG5cdGhlYWQuYXBwZW5kQ2hpbGQoc3R5bGVFbGVtZW50KTtcclxuXHRyZXR1cm4gc3R5bGVFbGVtZW50O1xyXG59XHJcblxyXG5mdW5jdGlvbiBjcmVhdGVMaW5rRWxlbWVudCgpIHtcclxuXHR2YXIgbGlua0VsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlua1wiKTtcclxuXHR2YXIgaGVhZCA9IGdldEhlYWRFbGVtZW50KCk7XHJcblx0bGlua0VsZW1lbnQucmVsID0gXCJzdHlsZXNoZWV0XCI7XHJcblx0aGVhZC5hcHBlbmRDaGlsZChsaW5rRWxlbWVudCk7XHJcblx0cmV0dXJuIGxpbmtFbGVtZW50O1xyXG59XHJcblxyXG5mdW5jdGlvbiBhZGRTdHlsZShvYmosIG9wdGlvbnMpIHtcclxuXHR2YXIgc3R5bGVFbGVtZW50LCB1cGRhdGUsIHJlbW92ZTtcclxuXHJcblx0aWYgKG9wdGlvbnMuc2luZ2xldG9uKSB7XHJcblx0XHR2YXIgc3R5bGVJbmRleCA9IHNpbmdsZXRvbkNvdW50ZXIrKztcclxuXHRcdHN0eWxlRWxlbWVudCA9IHNpbmdsZXRvbkVsZW1lbnQgfHwgKHNpbmdsZXRvbkVsZW1lbnQgPSBjcmVhdGVTdHlsZUVsZW1lbnQoKSk7XHJcblx0XHR1cGRhdGUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGVFbGVtZW50LCBzdHlsZUluZGV4LCBmYWxzZSk7XHJcblx0XHRyZW1vdmUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGVFbGVtZW50LCBzdHlsZUluZGV4LCB0cnVlKTtcclxuXHR9IGVsc2UgaWYob2JqLnNvdXJjZU1hcCAmJlxyXG5cdFx0dHlwZW9mIFVSTCA9PT0gXCJmdW5jdGlvblwiICYmXHJcblx0XHR0eXBlb2YgVVJMLmNyZWF0ZU9iamVjdFVSTCA9PT0gXCJmdW5jdGlvblwiICYmXHJcblx0XHR0eXBlb2YgVVJMLnJldm9rZU9iamVjdFVSTCA9PT0gXCJmdW5jdGlvblwiICYmXHJcblx0XHR0eXBlb2YgQmxvYiA9PT0gXCJmdW5jdGlvblwiICYmXHJcblx0XHR0eXBlb2YgYnRvYSA9PT0gXCJmdW5jdGlvblwiKSB7XHJcblx0XHRzdHlsZUVsZW1lbnQgPSBjcmVhdGVMaW5rRWxlbWVudCgpO1xyXG5cdFx0dXBkYXRlID0gdXBkYXRlTGluay5iaW5kKG51bGwsIHN0eWxlRWxlbWVudCk7XHJcblx0XHRyZW1vdmUgPSBmdW5jdGlvbigpIHtcclxuXHRcdFx0c3R5bGVFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50KTtcclxuXHRcdFx0aWYoc3R5bGVFbGVtZW50LmhyZWYpXHJcblx0XHRcdFx0VVJMLnJldm9rZU9iamVjdFVSTChzdHlsZUVsZW1lbnQuaHJlZik7XHJcblx0XHR9O1xyXG5cdH0gZWxzZSB7XHJcblx0XHRzdHlsZUVsZW1lbnQgPSBjcmVhdGVTdHlsZUVsZW1lbnQoKTtcclxuXHRcdHVwZGF0ZSA9IGFwcGx5VG9UYWcuYmluZChudWxsLCBzdHlsZUVsZW1lbnQpO1xyXG5cdFx0cmVtb3ZlID0gZnVuY3Rpb24oKSB7XHJcblx0XHRcdHN0eWxlRWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudCk7XHJcblx0XHR9O1xyXG5cdH1cclxuXHJcblx0dXBkYXRlKG9iaik7XHJcblxyXG5cdHJldHVybiBmdW5jdGlvbiB1cGRhdGVTdHlsZShuZXdPYmopIHtcclxuXHRcdGlmKG5ld09iaikge1xyXG5cdFx0XHRpZihuZXdPYmouY3NzID09PSBvYmouY3NzICYmIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXApXHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHR1cGRhdGUob2JqID0gbmV3T2JqKTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdHJlbW92ZSgpO1xyXG5cdFx0fVxyXG5cdH07XHJcbn1cclxuXHJcbnZhciByZXBsYWNlVGV4dCA9IChmdW5jdGlvbiAoKSB7XHJcblx0dmFyIHRleHRTdG9yZSA9IFtdO1xyXG5cclxuXHRyZXR1cm4gZnVuY3Rpb24gKGluZGV4LCByZXBsYWNlbWVudCkge1xyXG5cdFx0dGV4dFN0b3JlW2luZGV4XSA9IHJlcGxhY2VtZW50O1xyXG5cdFx0cmV0dXJuIHRleHRTdG9yZS5maWx0ZXIoQm9vbGVhbikuam9pbignXFxuJyk7XHJcblx0fTtcclxufSkoKTtcclxuXHJcbmZ1bmN0aW9uIGFwcGx5VG9TaW5nbGV0b25UYWcoc3R5bGVFbGVtZW50LCBpbmRleCwgcmVtb3ZlLCBvYmopIHtcclxuXHR2YXIgY3NzID0gcmVtb3ZlID8gXCJcIiA6IG9iai5jc3M7XHJcblxyXG5cdGlmIChzdHlsZUVsZW1lbnQuc3R5bGVTaGVldCkge1xyXG5cdFx0c3R5bGVFbGVtZW50LnN0eWxlU2hlZXQuY3NzVGV4dCA9IHJlcGxhY2VUZXh0KGluZGV4LCBjc3MpO1xyXG5cdH0gZWxzZSB7XHJcblx0XHR2YXIgY3NzTm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcyk7XHJcblx0XHR2YXIgY2hpbGROb2RlcyA9IHN0eWxlRWxlbWVudC5jaGlsZE5vZGVzO1xyXG5cdFx0aWYgKGNoaWxkTm9kZXNbaW5kZXhdKSBzdHlsZUVsZW1lbnQucmVtb3ZlQ2hpbGQoY2hpbGROb2Rlc1tpbmRleF0pO1xyXG5cdFx0aWYgKGNoaWxkTm9kZXMubGVuZ3RoKSB7XHJcblx0XHRcdHN0eWxlRWxlbWVudC5pbnNlcnRCZWZvcmUoY3NzTm9kZSwgY2hpbGROb2Rlc1tpbmRleF0pO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0c3R5bGVFbGVtZW50LmFwcGVuZENoaWxkKGNzc05vZGUpO1xyXG5cdFx0fVxyXG5cdH1cclxufVxyXG5cclxuZnVuY3Rpb24gYXBwbHlUb1RhZyhzdHlsZUVsZW1lbnQsIG9iaikge1xyXG5cdHZhciBjc3MgPSBvYmouY3NzO1xyXG5cdHZhciBtZWRpYSA9IG9iai5tZWRpYTtcclxuXHR2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcclxuXHJcblx0aWYobWVkaWEpIHtcclxuXHRcdHN0eWxlRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJtZWRpYVwiLCBtZWRpYSlcclxuXHR9XHJcblxyXG5cdGlmKHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0KSB7XHJcblx0XHRzdHlsZUVsZW1lbnQuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xyXG5cdH0gZWxzZSB7XHJcblx0XHR3aGlsZShzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCkge1xyXG5cdFx0XHRzdHlsZUVsZW1lbnQucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpO1xyXG5cdFx0fVxyXG5cdFx0c3R5bGVFbGVtZW50LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xyXG5cdH1cclxufVxyXG5cclxuZnVuY3Rpb24gdXBkYXRlTGluayhsaW5rRWxlbWVudCwgb2JqKSB7XHJcblx0dmFyIGNzcyA9IG9iai5jc3M7XHJcblx0dmFyIG1lZGlhID0gb2JqLm1lZGlhO1xyXG5cdHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xyXG5cclxuXHRpZihzb3VyY2VNYXApIHtcclxuXHRcdC8vIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzI2NjAzODc1XHJcblx0XHRjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiICsgYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSArIFwiICovXCI7XHJcblx0fVxyXG5cclxuXHR2YXIgYmxvYiA9IG5ldyBCbG9iKFtjc3NdLCB7IHR5cGU6IFwidGV4dC9jc3NcIiB9KTtcclxuXHJcblx0dmFyIG9sZFNyYyA9IGxpbmtFbGVtZW50LmhyZWY7XHJcblxyXG5cdGxpbmtFbGVtZW50LmhyZWYgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKGJsb2IpO1xyXG5cclxuXHRpZihvbGRTcmMpXHJcblx0XHRVUkwucmV2b2tlT2JqZWN0VVJMKG9sZFNyYyk7XHJcbn1cclxuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vc3R5bGUtbG9hZGVyL2FkZFN0eWxlcy5qc1xuICoqIG1vZHVsZSBpZCA9IDIwXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvLyBzdHlsZS1sb2FkZXI6IEFkZHMgc29tZSBjc3MgdG8gdGhlIERPTSBieSBhZGRpbmcgYSA8c3R5bGU+IHRhZ1xuXG4vLyBsb2FkIHRoZSBzdHlsZXNcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9pbmRleC5qcz9vdXRwdXRTdHlsZT1leHBhbmRlZCZpbmNsdWRlUGF0aHNbXT0vVXNlcnMvcGF2aXRocmEuay9Xb3Jrc3BhY2Uvd2l6YXJkLW9mLW96L2Jvd2VyX2NvbXBvbmVudHMmaW5jbHVkZVBhdGhzW109L1VzZXJzL3Bhdml0aHJhLmsvV29ya3NwYWNlL3dpemFyZC1vZi1vei9ub2RlX21vZHVsZXMhLi93aXphcmQtb2Ytb3ouc2Nzc1wiKTtcbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuLy8gYWRkIHRoZSBzdHlsZXMgdG8gdGhlIERPTVxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCB7fSk7XG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2Fscztcbi8vIEhvdCBNb2R1bGUgUmVwbGFjZW1lbnRcbmlmKG1vZHVsZS5ob3QpIHtcblx0Ly8gV2hlbiB0aGUgc3R5bGVzIGNoYW5nZSwgdXBkYXRlIHRoZSA8c3R5bGU+IHRhZ3Ncblx0aWYoIWNvbnRlbnQubG9jYWxzKSB7XG5cdFx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvaW5kZXguanM/b3V0cHV0U3R5bGU9ZXhwYW5kZWQmaW5jbHVkZVBhdGhzW109L1VzZXJzL3Bhdml0aHJhLmsvV29ya3NwYWNlL3dpemFyZC1vZi1vei9ib3dlcl9jb21wb25lbnRzJmluY2x1ZGVQYXRoc1tdPS9Vc2Vycy9wYXZpdGhyYS5rL1dvcmtzcGFjZS93aXphcmQtb2Ytb3ovbm9kZV9tb2R1bGVzIS4vd2l6YXJkLW9mLW96LnNjc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvaW5kZXguanM/b3V0cHV0U3R5bGU9ZXhwYW5kZWQmaW5jbHVkZVBhdGhzW109L1VzZXJzL3Bhdml0aHJhLmsvV29ya3NwYWNlL3dpemFyZC1vZi1vei9ib3dlcl9jb21wb25lbnRzJmluY2x1ZGVQYXRoc1tdPS9Vc2Vycy9wYXZpdGhyYS5rL1dvcmtzcGFjZS93aXphcmQtb2Ytb3ovbm9kZV9tb2R1bGVzIS4vd2l6YXJkLW9mLW96LnNjc3NcIik7XG5cdFx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblx0XHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0XHR9KTtcblx0fVxuXHQvLyBXaGVuIHRoZSBtb2R1bGUgaXMgZGlzcG9zZWQsIHJlbW92ZSB0aGUgPHN0eWxlPiB0YWdzXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufVxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9saWIvd2l6YXJkLW9mLW96LnNjc3NcbiAqKiBtb2R1bGUgaWQgPSAyMVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwibW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFXzIyX187XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiBleHRlcm5hbCBcIlJlYWN0XCJcbiAqKiBtb2R1bGUgaWQgPSAyMlxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==